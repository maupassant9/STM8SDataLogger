                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mmcsd
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _SD_GetResponseVal
                                     12 	.globl _dly
                                     13 	.globl _SD_Init
                                     14 	.globl _SD_Detect
                                     15 	.globl _SD_SendCmd
                                     16 	.globl _SD_GetDataResponse
                                     17 	.globl _SD_GetResponse
                                     18 	.globl _SD_GoIdleState
                                     19 	.globl _SD_WriteByte
                                     20 	.globl _SD_ReadByte
                                     21 	.globl _SD_LowLevel_Init
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DATA
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area INITIALIZED
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 
                                     35 ; default segment ordering for linker
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area CONST
                                     40 	.area INITIALIZER
                                     41 	.area CODE
                                     42 
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
                                     47 	.area GSINIT
                                     48 	.area GSFINAL
                                     49 	.area GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area HOME
                                     54 	.area HOME
                                     55 ;--------------------------------------------------------
                                     56 ; code
                                     57 ;--------------------------------------------------------
                                     58 	.area CODE
                                     59 ;	../src/mmcsd.c: 90: uint8_t SD_Init(void)
                                     60 ;	-----------------------------------------
                                     61 ;	 function SD_Init
                                     62 ;	-----------------------------------------
      000000                         63 _SD_Init:
      000000 52 04            [ 2]   64 	sub	sp, #4
                                     65 ;	../src/mmcsd.c: 96: SD_LowLevel_Init();
      000002 CDr02rD1         [ 4]   66 	call	_SD_LowLevel_Init
                                     67 ;	../src/mmcsd.c: 99: SD_CS_LOW();
      000005 72 19 50 0A      [ 1]   68 	bres	20490, #4
                                     69 ;	../src/mmcsd.c: 103: for (i = 0; i <= 9; i++)
      000009 5F               [ 1]   70 	clrw	x
      00000A 1F 03            [ 2]   71 	ldw	(0x03, sp), x
      00000C 1F 01            [ 2]   72 	ldw	(0x01, sp), x
      00000E                         73 00104$:
                                     74 ;	../src/mmcsd.c: 106: SD_WriteByte(SD_DUMMY_BYTE);
      00000E 4B FF            [ 1]   75 	push	#0xff
      000010 CDr02rA5         [ 4]   76 	call	_SD_WriteByte
      000013 84               [ 1]   77 	pop	a
                                     78 ;	../src/mmcsd.c: 103: for (i = 0; i <= 9; i++)
      000014 1E 03            [ 2]   79 	ldw	x, (0x03, sp)
      000016 5C               [ 1]   80 	incw	x
      000017 1F 03            [ 2]   81 	ldw	(0x03, sp), x
      000019 26 05            [ 1]   82 	jrne	00124$
      00001B 1E 01            [ 2]   83 	ldw	x, (0x01, sp)
      00001D 5C               [ 1]   84 	incw	x
      00001E 1F 01            [ 2]   85 	ldw	(0x01, sp), x
      000020                         86 00124$:
      000020 AE 00 09         [ 2]   87 	ldw	x, #0x0009
      000023 13 03            [ 2]   88 	cpw	x, (0x03, sp)
      000025 4F               [ 1]   89 	clr	a
      000026 12 02            [ 1]   90 	sbc	a, (0x02, sp)
      000028 4F               [ 1]   91 	clr	a
      000029 12 01            [ 1]   92 	sbc	a, (0x01, sp)
      00002B 24 E1            [ 1]   93 	jrnc	00104$
                                     94 ;	../src/mmcsd.c: 110: res = SD_GoIdleState();
      00002D CDr01r76         [ 4]   95 	call	_SD_GoIdleState
      000030 97               [ 1]   96 	ld	xl, a
                                     97 ;	../src/mmcsd.c: 112: if(res == SD_RESPONSE_NO_ERROR){
      000031 4D               [ 1]   98 	tnz	a
      000032 26 08            [ 1]   99 	jrne	00103$
                                    100 ;	../src/mmcsd.c: 113: SPI->CR1 &= 0xc7;
      000034 C6 52 00         [ 1]  101 	ld	a, 0x5200
      000037 A4 C7            [ 1]  102 	and	a, #0xc7
      000039 C7 52 00         [ 1]  103 	ld	0x5200, a
      00003C                        104 00103$:
                                    105 ;	../src/mmcsd.c: 116: return (res);
      00003C 9F               [ 1]  106 	ld	a, xl
                                    107 ;	../src/mmcsd.c: 117: }
      00003D 5B 04            [ 2]  108 	addw	sp, #4
      00003F 81               [ 4]  109 	ret
                                    110 ;	../src/mmcsd.c: 124: uint8_t SD_Detect(void)
                                    111 ;	-----------------------------------------
                                    112 ;	 function SD_Detect
                                    113 ;	-----------------------------------------
      000040                        114 _SD_Detect:
      000040 88               [ 1]  115 	push	a
                                    116 ;	../src/mmcsd.c: 126: __IO uint8_t status = SD_PRESENT;
                                    117 ;	../src/mmcsd.c: 136: return SD_PRESENT;
      000041 A6 01            [ 1]  118 	ld	a, #0x01
      000043 6B 01            [ 1]  119 	ld	(0x01, sp), a
                                    120 ;	../src/mmcsd.c: 138: }
      000045 5B 01            [ 2]  121 	addw	sp, #1
      000047 81               [ 4]  122 	ret
                                    123 ;	../src/mmcsd.c: 663: void SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc)
                                    124 ;	-----------------------------------------
                                    125 ;	 function SD_SendCmd
                                    126 ;	-----------------------------------------
      000048                        127 _SD_SendCmd:
      000048 52 0A            [ 2]  128 	sub	sp, #10
                                    129 ;	../src/mmcsd.c: 669: Frame[0] = (uint8_t)(Cmd | 0x40); /*!< Construct byte 1 */
      00004A 7B 0D            [ 1]  130 	ld	a, (0x0d, sp)
      00004C AA 40            [ 1]  131 	or	a, #0x40
      00004E 6B 01            [ 1]  132 	ld	(0x01, sp), a
                                    133 ;	../src/mmcsd.c: 671: Frame[1] = (uint8_t)(Arg >> 24); /*!< Construct byte 2 */
      000050 96               [ 1]  134 	ldw	x, sp
      000051 5C               [ 1]  135 	incw	x
      000052 5C               [ 1]  136 	incw	x
      000053 7B 0E            [ 1]  137 	ld	a, (0x0e, sp)
      000055 0F 07            [ 1]  138 	clr	(0x07, sp)
      000057 F7               [ 1]  139 	ld	(x), a
                                    140 ;	../src/mmcsd.c: 673: Frame[2] = (uint8_t)(Arg >> 16); /*!< Construct byte 3 */
      000058 96               [ 1]  141 	ldw	x, sp
      000059 1C 00 03         [ 2]  142 	addw	x, #3
      00005C 16 0E            [ 2]  143 	ldw	y, (0x0e, sp)
      00005E 0F 07            [ 1]  144 	clr	(0x07, sp)
      000060 90 9F            [ 1]  145 	ld	a, yl
      000062 F7               [ 1]  146 	ld	(x), a
                                    147 ;	../src/mmcsd.c: 675: Frame[3] = (uint8_t)(Arg >> 8); /*!< Construct byte 4 */
      000063 96               [ 1]  148 	ldw	x, sp
      000064 1C 00 04         [ 2]  149 	addw	x, #4
      000067 16 10            [ 2]  150 	ldw	y, (0x10, sp)
      000069 90 9E            [ 1]  151 	ld	a, yh
      00006B F7               [ 1]  152 	ld	(x), a
                                    153 ;	../src/mmcsd.c: 677: Frame[4] = (uint8_t)(Arg); /*!< Construct byte 5 */
      00006C 96               [ 1]  154 	ldw	x, sp
      00006D 7B 11            [ 1]  155 	ld	a, (0x11, sp)
      00006F E7 05            [ 1]  156 	ld	(5, x), a
                                    157 ;	../src/mmcsd.c: 679: Frame[5] = (Crc); /*!< Construct CRC: byte 6 */
      000071 96               [ 1]  158 	ldw	x, sp
      000072 7B 12            [ 1]  159 	ld	a, (0x12, sp)
      000074 E7 06            [ 1]  160 	ld	(6, x), a
                                    161 ;	../src/mmcsd.c: 681: for (i = 0; i < 6; i++)
      000076 5F               [ 1]  162 	clrw	x
      000077 1F 09            [ 2]  163 	ldw	(0x09, sp), x
      000079 1F 07            [ 2]  164 	ldw	(0x07, sp), x
      00007B                        165 00102$:
                                    166 ;	../src/mmcsd.c: 683: SD_WriteByte(Frame[i]); /*!< Send the Cmd bytes */
      00007B 96               [ 1]  167 	ldw	x, sp
      00007C 5C               [ 1]  168 	incw	x
      00007D 72 FB 09         [ 2]  169 	addw	x, (0x09, sp)
      000080 F6               [ 1]  170 	ld	a, (x)
      000081 88               [ 1]  171 	push	a
      000082 CDr02rA5         [ 4]  172 	call	_SD_WriteByte
      000085 84               [ 1]  173 	pop	a
                                    174 ;	../src/mmcsd.c: 681: for (i = 0; i < 6; i++)
      000086 1E 09            [ 2]  175 	ldw	x, (0x09, sp)
      000088 5C               [ 1]  176 	incw	x
      000089 1F 09            [ 2]  177 	ldw	(0x09, sp), x
      00008B 26 05            [ 1]  178 	jrne	00112$
      00008D 1E 07            [ 2]  179 	ldw	x, (0x07, sp)
      00008F 5C               [ 1]  180 	incw	x
      000090 1F 07            [ 2]  181 	ldw	(0x07, sp), x
      000092                        182 00112$:
      000092 1E 09            [ 2]  183 	ldw	x, (0x09, sp)
      000094 A3 00 06         [ 2]  184 	cpw	x, #0x0006
      000097 7B 08            [ 1]  185 	ld	a, (0x08, sp)
      000099 A2 00            [ 1]  186 	sbc	a, #0x00
      00009B 7B 07            [ 1]  187 	ld	a, (0x07, sp)
      00009D A2 00            [ 1]  188 	sbc	a, #0x00
      00009F 25 DA            [ 1]  189 	jrc	00102$
                                    190 ;	../src/mmcsd.c: 685: }
      0000A1 5B 0A            [ 2]  191 	addw	sp, #10
      0000A3 81               [ 4]  192 	ret
                                    193 ;	../src/mmcsd.c: 699: uint8_t SD_GetDataResponse(void)
                                    194 ;	-----------------------------------------
                                    195 ;	 function SD_GetDataResponse
                                    196 ;	-----------------------------------------
      0000A4                        197 _SD_GetDataResponse:
      0000A4 52 05            [ 2]  198 	sub	sp, #5
                                    199 ;	../src/mmcsd.c: 702: uint8_t response = 0, rvalue = 0;
      0000A6 0F 01            [ 1]  200 	clr	(0x01, sp)
                                    201 ;	../src/mmcsd.c: 704: while (i <= 64)
      0000A8 5F               [ 1]  202 	clrw	x
      0000A9 1F 04            [ 2]  203 	ldw	(0x04, sp), x
      0000AB 1F 02            [ 2]  204 	ldw	(0x02, sp), x
      0000AD                        205 00108$:
      0000AD AE 00 40         [ 2]  206 	ldw	x, #0x0040
      0000B0 13 04            [ 2]  207 	cpw	x, (0x04, sp)
      0000B2 4F               [ 1]  208 	clr	a
      0000B3 12 03            [ 1]  209 	sbc	a, (0x03, sp)
      0000B5 4F               [ 1]  210 	clr	a
      0000B6 12 02            [ 1]  211 	sbc	a, (0x02, sp)
      0000B8 25 39            [ 1]  212 	jrc	00111$
                                    213 ;	../src/mmcsd.c: 707: response = SD_ReadByte();
      0000BA CDr02rBC         [ 4]  214 	call	_SD_ReadByte
                                    215 ;	../src/mmcsd.c: 709: response &= 0x1F;
      0000BD A4 1F            [ 1]  216 	and	a, #0x1f
                                    217 ;	../src/mmcsd.c: 710: switch (response)
      0000BF 6B 01            [ 1]  218 	ld	(0x01, sp), a
      0000C1 A1 05            [ 1]  219 	cp	a, #0x05
      0000C3 27 0E            [ 1]  220 	jreq	00101$
      0000C5 7B 01            [ 1]  221 	ld	a, (0x01, sp)
      0000C7 A1 0B            [ 1]  222 	cp	a, #0x0b
      0000C9 27 0C            [ 1]  223 	jreq	00102$
      0000CB 7B 01            [ 1]  224 	ld	a, (0x01, sp)
      0000CD A1 0D            [ 1]  225 	cp	a, #0x0d
      0000CF 27 0A            [ 1]  226 	jreq	00103$
      0000D1 20 0C            [ 2]  227 	jra	00104$
                                    228 ;	../src/mmcsd.c: 712: case SD_DATA_OK:
      0000D3                        229 00101$:
                                    230 ;	../src/mmcsd.c: 714: rvalue = SD_DATA_OK;
      0000D3 A6 05            [ 1]  231 	ld	a, #0x05
                                    232 ;	../src/mmcsd.c: 715: break;
      0000D5 20 0A            [ 2]  233 	jra	00105$
                                    234 ;	../src/mmcsd.c: 717: case SD_DATA_CRC_ERROR:
      0000D7                        235 00102$:
                                    236 ;	../src/mmcsd.c: 718: return SD_DATA_CRC_ERROR;
      0000D7 A6 0B            [ 1]  237 	ld	a, #0x0b
      0000D9 20 20            [ 2]  238 	jra	00114$
                                    239 ;	../src/mmcsd.c: 719: case SD_DATA_WRITE_ERROR:
      0000DB                        240 00103$:
                                    241 ;	../src/mmcsd.c: 720: return SD_DATA_WRITE_ERROR;
      0000DB A6 0D            [ 1]  242 	ld	a, #0x0d
      0000DD 20 1C            [ 2]  243 	jra	00114$
                                    244 ;	../src/mmcsd.c: 721: default:
      0000DF                        245 00104$:
                                    246 ;	../src/mmcsd.c: 723: rvalue = SD_DATA_OTHER_ERROR;
      0000DF A6 FF            [ 1]  247 	ld	a, #0xff
                                    248 ;	../src/mmcsd.c: 726: }
      0000E1                        249 00105$:
                                    250 ;	../src/mmcsd.c: 728: if (rvalue == SD_DATA_OK)
      0000E1 A1 05            [ 1]  251 	cp	a, #0x05
      0000E3 27 0E            [ 1]  252 	jreq	00111$
                                    253 ;	../src/mmcsd.c: 731: i++;
      0000E5 1E 04            [ 2]  254 	ldw	x, (0x04, sp)
      0000E7 5C               [ 1]  255 	incw	x
      0000E8 1F 04            [ 2]  256 	ldw	(0x04, sp), x
      0000EA 26 C1            [ 1]  257 	jrne	00108$
      0000EC 1E 02            [ 2]  258 	ldw	x, (0x02, sp)
      0000EE 5C               [ 1]  259 	incw	x
      0000EF 1F 02            [ 2]  260 	ldw	(0x02, sp), x
      0000F1 20 BA            [ 2]  261 	jra	00108$
                                    262 ;	../src/mmcsd.c: 735: while (SD_ReadByte() == 0);
      0000F3                        263 00111$:
      0000F3 CDr02rBC         [ 4]  264 	call	_SD_ReadByte
      0000F6 4D               [ 1]  265 	tnz	a
      0000F7 27 FA            [ 1]  266 	jreq	00111$
                                    267 ;	../src/mmcsd.c: 738: return response;
      0000F9 7B 01            [ 1]  268 	ld	a, (0x01, sp)
      0000FB                        269 00114$:
                                    270 ;	../src/mmcsd.c: 739: }
      0000FB 5B 05            [ 2]  271 	addw	sp, #5
      0000FD 81               [ 4]  272 	ret
                                    273 ;	../src/mmcsd.c: 748: uint8_t SD_GetResponse(uint8_t Response)
                                    274 ;	-----------------------------------------
                                    275 ;	 function SD_GetResponse
                                    276 ;	-----------------------------------------
      0000FE                        277 _SD_GetResponse:
                                    278 ;	../src/mmcsd.c: 753: while ((SD_ReadByte() != Response) && Count) 
      0000FE AE 0F FF         [ 2]  279 	ldw	x, #0x0fff
      000101 90 5F            [ 1]  280 	clrw	y
      000103                        281 00102$:
      000103 89               [ 2]  282 	pushw	x
      000104 90 89            [ 2]  283 	pushw	y
      000106 CDr02rBC         [ 4]  284 	call	_SD_ReadByte
      000109 90 85            [ 2]  285 	popw	y
      00010B 85               [ 2]  286 	popw	x
      00010C 11 03            [ 1]  287 	cp	a, (0x03, sp)
      00010E 27 10            [ 1]  288 	jreq	00104$
      000110 5D               [ 2]  289 	tnzw	x
      000111 26 04            [ 1]  290 	jrne	00134$
      000113 90 5D            [ 2]  291 	tnzw	y
      000115 27 09            [ 1]  292 	jreq	00104$
      000117                        293 00134$:
                                    294 ;	../src/mmcsd.c: 755: Count--;
      000117 1D 00 01         [ 2]  295 	subw	x, #0x0001
      00011A 24 E7            [ 1]  296 	jrnc	00102$
      00011C 90 5A            [ 2]  297 	decw	y
      00011E 20 E3            [ 2]  298 	jra	00102$
      000120                        299 00104$:
                                    300 ;	../src/mmcsd.c: 757: if (Count == 0)
      000120 5D               [ 2]  301 	tnzw	x
      000121 26 07            [ 1]  302 	jrne	00106$
      000123 90 5D            [ 2]  303 	tnzw	y
      000125 26 03            [ 1]  304 	jrne	00106$
                                    305 ;	../src/mmcsd.c: 760: return SD_RESPONSE_FAILURE;
      000127 A6 FF            [ 1]  306 	ld	a, #0xff
      000129 81               [ 4]  307 	ret
      00012A                        308 00106$:
                                    309 ;	../src/mmcsd.c: 765: return SD_RESPONSE_NO_ERROR;
      00012A 4F               [ 1]  310 	clr	a
                                    311 ;	../src/mmcsd.c: 767: }
      00012B 81               [ 4]  312 	ret
                                    313 ;	../src/mmcsd.c: 772: void SD_GetResponseVal(uint8_t *pResp, uint8_t response)
                                    314 ;	-----------------------------------------
                                    315 ;	 function SD_GetResponseVal
                                    316 ;	-----------------------------------------
      00012C                        317 _SD_GetResponseVal:
                                    318 ;	../src/mmcsd.c: 775: if(SD_GetResponse(response) == SD_RESPONSE_FAILURE)
      00012C 7B 05            [ 1]  319 	ld	a, (0x05, sp)
      00012E 88               [ 1]  320 	push	a
      00012F CDr00rFE         [ 4]  321 	call	_SD_GetResponse
      000132 5B 01            [ 2]  322 	addw	sp, #1
                                    323 ;	../src/mmcsd.c: 777: *pResp++ = 0xff;
      000134 16 03            [ 2]  324 	ldw	y, (0x03, sp)
      000136 93               [ 1]  325 	ldw	x, y
      000137 5C               [ 1]  326 	incw	x
                                    327 ;	../src/mmcsd.c: 775: if(SD_GetResponse(response) == SD_RESPONSE_FAILURE)
      000138 4C               [ 1]  328 	inc	a
      000139 26 08            [ 1]  329 	jrne	00102$
                                    330 ;	../src/mmcsd.c: 777: *pResp++ = 0xff;
      00013B A6 FF            [ 1]  331 	ld	a, #0xff
      00013D 90 F7            [ 1]  332 	ld	(y), a
      00013F 1F 03            [ 2]  333 	ldw	(0x03, sp), x
      000141 20 06            [ 2]  334 	jra	00103$
      000143                        335 00102$:
                                    336 ;	../src/mmcsd.c: 779: *pResp++ = response;
      000143 7B 05            [ 1]  337 	ld	a, (0x05, sp)
      000145 90 F7            [ 1]  338 	ld	(y), a
      000147 1F 03            [ 2]  339 	ldw	(0x03, sp), x
      000149                        340 00103$:
                                    341 ;	../src/mmcsd.c: 782: *pResp++ = SD_ReadByte();
      000149 1E 03            [ 2]  342 	ldw	x, (0x03, sp)
      00014B 89               [ 2]  343 	pushw	x
      00014C CDr02rBC         [ 4]  344 	call	_SD_ReadByte
      00014F 85               [ 2]  345 	popw	x
      000150 F7               [ 1]  346 	ld	(x), a
      000151 5C               [ 1]  347 	incw	x
                                    348 ;	../src/mmcsd.c: 783: *pResp++ = SD_ReadByte();
      000152 1F 03            [ 2]  349 	ldw	(0x03, sp), x
      000154 89               [ 2]  350 	pushw	x
      000155 CDr02rBC         [ 4]  351 	call	_SD_ReadByte
      000158 85               [ 2]  352 	popw	x
      000159 F7               [ 1]  353 	ld	(x), a
      00015A 5C               [ 1]  354 	incw	x
                                    355 ;	../src/mmcsd.c: 784: *pResp++ = SD_ReadByte();
      00015B 1F 03            [ 2]  356 	ldw	(0x03, sp), x
      00015D 89               [ 2]  357 	pushw	x
      00015E CDr02rBC         [ 4]  358 	call	_SD_ReadByte
      000161 85               [ 2]  359 	popw	x
      000162 F7               [ 1]  360 	ld	(x), a
      000163 5C               [ 1]  361 	incw	x
                                    362 ;	../src/mmcsd.c: 785: *pResp++ = SD_ReadByte();
      000164 1F 03            [ 2]  363 	ldw	(0x03, sp), x
      000166 89               [ 2]  364 	pushw	x
      000167 CDr02rBC         [ 4]  365 	call	_SD_ReadByte
      00016A 85               [ 2]  366 	popw	x
      00016B F7               [ 1]  367 	ld	(x), a
      00016C 5C               [ 1]  368 	incw	x
                                    369 ;	../src/mmcsd.c: 786: *pResp = SD_ReadByte();
      00016D 1F 03            [ 2]  370 	ldw	(0x03, sp), x
      00016F 89               [ 2]  371 	pushw	x
      000170 CDr02rBC         [ 4]  372 	call	_SD_ReadByte
      000173 85               [ 2]  373 	popw	x
      000174 F7               [ 1]  374 	ld	(x), a
                                    375 ;	../src/mmcsd.c: 787: }
      000175 81               [ 4]  376 	ret
                                    377 ;	../src/mmcsd.c: 871: uint8_t SD_GoIdleState(void)
                                    378 ;	-----------------------------------------
                                    379 ;	 function SD_GoIdleState
                                    380 ;	-----------------------------------------
      000176                        381 _SD_GoIdleState:
      000176 52 0A            [ 2]  382 	sub	sp, #10
                                    383 ;	../src/mmcsd.c: 874: uint8_t resp[6] = {0};
      000178 0F 01            [ 1]  384 	clr	(0x01, sp)
      00017A 96               [ 1]  385 	ldw	x, sp
      00017B 5C               [ 1]  386 	incw	x
      00017C 5C               [ 1]  387 	incw	x
      00017D 7F               [ 1]  388 	clr	(x)
      00017E 96               [ 1]  389 	ldw	x, sp
      00017F 6F 03            [ 1]  390 	clr	(3, x)
      000181 96               [ 1]  391 	ldw	x, sp
      000182 1C 00 04         [ 2]  392 	addw	x, #4
      000185 1F 07            [ 2]  393 	ldw	(0x07, sp), x
      000187 7F               [ 1]  394 	clr	(x)
      000188 96               [ 1]  395 	ldw	x, sp
      000189 1C 00 05         [ 2]  396 	addw	x, #5
      00018C 1F 09            [ 2]  397 	ldw	(0x09, sp), x
      00018E 7F               [ 1]  398 	clr	(x)
      00018F 96               [ 1]  399 	ldw	x, sp
      000190 1C 00 06         [ 2]  400 	addw	x, #6
      000193 7F               [ 1]  401 	clr	(x)
                                    402 ;	../src/mmcsd.c: 876: SD_CS_LOW();
      000194 C6 50 0A         [ 1]  403 	ld	a, 0x500a
      000197 A4 EF            [ 1]  404 	and	a, #0xef
      000199 C7 50 0A         [ 1]  405 	ld	0x500a, a
                                    406 ;	../src/mmcsd.c: 879: SD_SendCmd(SD_CMD_GO_IDLE_STATE, (uint32_t)0, 0x95);
      00019C 4B 95            [ 1]  407 	push	#0x95
      00019E 5F               [ 1]  408 	clrw	x
      00019F 89               [ 2]  409 	pushw	x
      0001A0 5F               [ 1]  410 	clrw	x
      0001A1 89               [ 2]  411 	pushw	x
      0001A2 4B 00            [ 1]  412 	push	#0x00
      0001A4 CDr00r48         [ 4]  413 	call	_SD_SendCmd
      0001A7 5B 06            [ 2]  414 	addw	sp, #6
                                    415 ;	../src/mmcsd.c: 882: if (SD_GetResponse(SD_IN_IDLE_STATE))
      0001A9 4B 01            [ 1]  416 	push	#0x01
      0001AB CDr00rFE         [ 4]  417 	call	_SD_GetResponse
      0001AE 5B 01            [ 2]  418 	addw	sp, #1
      0001B0 4D               [ 1]  419 	tnz	a
      0001B1 27 05            [ 1]  420 	jreq	00102$
                                    421 ;	../src/mmcsd.c: 885: return SD_RESPONSE_FAILURE;
      0001B3 A6 FF            [ 1]  422 	ld	a, #0xff
      0001B5 CCr02rA2         [ 2]  423 	jp	00116$
      0001B8                        424 00102$:
                                    425 ;	../src/mmcsd.c: 888: SD_SendCmd(SD_CMD_IF_COND, (uint32_t)0x156, 0x43);
      0001B8 4B 43            [ 1]  426 	push	#0x43
      0001BA 4B 56            [ 1]  427 	push	#0x56
      0001BC 4B 01            [ 1]  428 	push	#0x01
      0001BE 5F               [ 1]  429 	clrw	x
      0001BF 89               [ 2]  430 	pushw	x
      0001C0 4B 08            [ 1]  431 	push	#0x08
      0001C2 CDr00r48         [ 4]  432 	call	_SD_SendCmd
      0001C5 5B 06            [ 2]  433 	addw	sp, #6
                                    434 ;	../src/mmcsd.c: 889: SD_GetResponseVal(resp,0x01);
      0001C7 4B 01            [ 1]  435 	push	#0x01
      0001C9 96               [ 1]  436 	ldw	x, sp
      0001CA 5C               [ 1]  437 	incw	x
      0001CB 5C               [ 1]  438 	incw	x
      0001CC 89               [ 2]  439 	pushw	x
      0001CD CDr01r2C         [ 4]  440 	call	_SD_GetResponseVal
      0001D0 5B 03            [ 2]  441 	addw	sp, #3
                                    442 ;	../src/mmcsd.c: 890: if(resp[0]==0x01){
      0001D2 7B 01            [ 1]  443 	ld	a, (0x01, sp)
      0001D4 4A               [ 1]  444 	dec	a
      0001D5 26 77            [ 1]  445 	jrne	00123$
                                    446 ;	../src/mmcsd.c: 892: if ((resp[3] == 0x01)&&(resp[4] == 0x56)){
      0001D7 1E 07            [ 2]  447 	ldw	x, (0x07, sp)
      0001D9 F6               [ 1]  448 	ld	a, (x)
      0001DA 4A               [ 1]  449 	dec	a
      0001DB 26 6D            [ 1]  450 	jrne	00107$
      0001DD 1E 09            [ 2]  451 	ldw	x, (0x09, sp)
      0001DF F6               [ 1]  452 	ld	a, (x)
      0001E0 A1 56            [ 1]  453 	cp	a, #0x56
      0001E2 26 66            [ 1]  454 	jrne	00107$
                                    455 ;	../src/mmcsd.c: 895: do{
      0001E4                        456 00103$:
                                    457 ;	../src/mmcsd.c: 896: SD_SendCmd(SD_CMD_55, (uint32_t)0, 0x01);
      0001E4 4B 01            [ 1]  458 	push	#0x01
      0001E6 5F               [ 1]  459 	clrw	x
      0001E7 89               [ 2]  460 	pushw	x
      0001E8 5F               [ 1]  461 	clrw	x
      0001E9 89               [ 2]  462 	pushw	x
      0001EA 4B 37            [ 1]  463 	push	#0x37
      0001EC CDr00r48         [ 4]  464 	call	_SD_SendCmd
      0001EF 5B 06            [ 2]  465 	addw	sp, #6
                                    466 ;	../src/mmcsd.c: 897: SD_GetResponseVal(resp,0x01);
      0001F1 4B 01            [ 1]  467 	push	#0x01
      0001F3 96               [ 1]  468 	ldw	x, sp
      0001F4 5C               [ 1]  469 	incw	x
      0001F5 5C               [ 1]  470 	incw	x
      0001F6 89               [ 2]  471 	pushw	x
      0001F7 CDr01r2C         [ 4]  472 	call	_SD_GetResponseVal
      0001FA 5B 03            [ 2]  473 	addw	sp, #3
                                    474 ;	../src/mmcsd.c: 898: dly((uint32_t)10);
      0001FC 4B 0A            [ 1]  475 	push	#0x0a
      0001FE 5F               [ 1]  476 	clrw	x
      0001FF 89               [ 2]  477 	pushw	x
      000200 4B 00            [ 1]  478 	push	#0x00
      000202 CDr00r00         [ 4]  479 	call	_dly
      000205 5B 04            [ 2]  480 	addw	sp, #4
                                    481 ;	../src/mmcsd.c: 899: SD_SendCmd(SD_ACMD_41&0x7f, (1UL<<30), 0x1);
      000207 4B 01            [ 1]  482 	push	#0x01
      000209 5F               [ 1]  483 	clrw	x
      00020A 89               [ 2]  484 	pushw	x
      00020B 4B 00            [ 1]  485 	push	#0x00
      00020D 4B 40            [ 1]  486 	push	#0x40
      00020F 4B 69            [ 1]  487 	push	#0x69
      000211 CDr00r48         [ 4]  488 	call	_SD_SendCmd
      000214 5B 06            [ 2]  489 	addw	sp, #6
                                    490 ;	../src/mmcsd.c: 900: dly((uint32_t)1000);
      000216 4B E8            [ 1]  491 	push	#0xe8
      000218 4B 03            [ 1]  492 	push	#0x03
      00021A 5F               [ 1]  493 	clrw	x
      00021B 89               [ 2]  494 	pushw	x
      00021C CDr00r00         [ 4]  495 	call	_dly
      00021F 5B 04            [ 2]  496 	addw	sp, #4
                                    497 ;	../src/mmcsd.c: 901: SD_GetResponseVal(resp,0x00);
      000221 96               [ 1]  498 	ldw	x, sp
      000222 5C               [ 1]  499 	incw	x
      000223 4B 00            [ 1]  500 	push	#0x00
      000225 89               [ 2]  501 	pushw	x
      000226 CDr01r2C         [ 4]  502 	call	_SD_GetResponseVal
      000229 5B 03            [ 2]  503 	addw	sp, #3
                                    504 ;	../src/mmcsd.c: 902: } while(resp[0]); //until resved 0x0
      00022B 7B 01            [ 1]  505 	ld	a, (0x01, sp)
      00022D 26 B5            [ 1]  506 	jrne	00103$
                                    507 ;	../src/mmcsd.c: 904: SD_SendCmd(SD_CMD_58, (uint32_t)0,0x01);
      00022F 4B 01            [ 1]  508 	push	#0x01
      000231 5F               [ 1]  509 	clrw	x
      000232 89               [ 2]  510 	pushw	x
      000233 5F               [ 1]  511 	clrw	x
      000234 89               [ 2]  512 	pushw	x
      000235 4B 3A            [ 1]  513 	push	#0x3a
      000237 CDr00r48         [ 4]  514 	call	_SD_SendCmd
      00023A 5B 06            [ 2]  515 	addw	sp, #6
                                    516 ;	../src/mmcsd.c: 905: SD_GetResponseVal(resp,58);
      00023C 4B 3A            [ 1]  517 	push	#0x3a
      00023E 96               [ 1]  518 	ldw	x, sp
      00023F 5C               [ 1]  519 	incw	x
      000240 5C               [ 1]  520 	incw	x
      000241 89               [ 2]  521 	pushw	x
      000242 CDr01r2C         [ 4]  522 	call	_SD_GetResponseVal
      000245 5B 03            [ 2]  523 	addw	sp, #3
                                    524 ;	../src/mmcsd.c: 906: return SD_RESPONSE_NO_ERROR;
      000247 4F               [ 1]  525 	clr	a
      000248 20 58            [ 2]  526 	jra	00116$
      00024A                        527 00107$:
                                    528 ;	../src/mmcsd.c: 909: return SD_RESPONSE_FAILURE;
      00024A A6 FF            [ 1]  529 	ld	a, #0xff
      00024C 20 54            [ 2]  530 	jra	00116$
                                    531 ;	../src/mmcsd.c: 914: do{
      00024E                        532 00123$:
      00024E                        533 00110$:
                                    534 ;	../src/mmcsd.c: 915: SD_SendCmd(SD_CMD_55, 0, 0x01);
      00024E 4B 01            [ 1]  535 	push	#0x01
      000250 5F               [ 1]  536 	clrw	x
      000251 89               [ 2]  537 	pushw	x
      000252 5F               [ 1]  538 	clrw	x
      000253 89               [ 2]  539 	pushw	x
      000254 4B 37            [ 1]  540 	push	#0x37
      000256 CDr00r48         [ 4]  541 	call	_SD_SendCmd
      000259 5B 06            [ 2]  542 	addw	sp, #6
                                    543 ;	../src/mmcsd.c: 916: SD_GetResponseVal(resp,0x01);
      00025B 96               [ 1]  544 	ldw	x, sp
      00025C 5C               [ 1]  545 	incw	x
      00025D 4B 01            [ 1]  546 	push	#0x01
      00025F 89               [ 2]  547 	pushw	x
      000260 CDr01r2C         [ 4]  548 	call	_SD_GetResponseVal
      000263 5B 03            [ 2]  549 	addw	sp, #3
                                    550 ;	../src/mmcsd.c: 917: dly((uint32_t)1000);
      000265 4B E8            [ 1]  551 	push	#0xe8
      000267 4B 03            [ 1]  552 	push	#0x03
      000269 5F               [ 1]  553 	clrw	x
      00026A 89               [ 2]  554 	pushw	x
      00026B CDr00r00         [ 4]  555 	call	_dly
      00026E 5B 04            [ 2]  556 	addw	sp, #4
                                    557 ;	../src/mmcsd.c: 918: SD_SendCmd(SD_ACMD_41&0x7f, 0UL, 0x1);
      000270 4B 01            [ 1]  558 	push	#0x01
      000272 5F               [ 1]  559 	clrw	x
      000273 89               [ 2]  560 	pushw	x
      000274 5F               [ 1]  561 	clrw	x
      000275 89               [ 2]  562 	pushw	x
      000276 4B 69            [ 1]  563 	push	#0x69
      000278 CDr00r48         [ 4]  564 	call	_SD_SendCmd
      00027B 5B 06            [ 2]  565 	addw	sp, #6
                                    566 ;	../src/mmcsd.c: 919: SD_GetResponseVal(resp,0x00);
      00027D 4B 00            [ 1]  567 	push	#0x00
      00027F 96               [ 1]  568 	ldw	x, sp
      000280 5C               [ 1]  569 	incw	x
      000281 5C               [ 1]  570 	incw	x
      000282 89               [ 2]  571 	pushw	x
      000283 CDr01r2C         [ 4]  572 	call	_SD_GetResponseVal
      000286 5B 03            [ 2]  573 	addw	sp, #3
                                    574 ;	../src/mmcsd.c: 920: dly((uint32_t)1000);
      000288 4B E8            [ 1]  575 	push	#0xe8
      00028A 4B 03            [ 1]  576 	push	#0x03
      00028C 5F               [ 1]  577 	clrw	x
      00028D 89               [ 2]  578 	pushw	x
      00028E CDr00r00         [ 4]  579 	call	_dly
      000291 5B 04            [ 2]  580 	addw	sp, #4
                                    581 ;	../src/mmcsd.c: 921: } while(resp[0]);
      000293 7B 01            [ 1]  582 	ld	a, (0x01, sp)
      000295 26 B7            [ 1]  583 	jrne	00110$
                                    584 ;	../src/mmcsd.c: 926: SD_CS_HIGH();
      000297 72 18 50 0A      [ 1]  585 	bset	20490, #4
                                    586 ;	../src/mmcsd.c: 929: SD_WriteByte(SD_DUMMY_BYTE);
      00029B 4B FF            [ 1]  587 	push	#0xff
      00029D CDr02rA5         [ 4]  588 	call	_SD_WriteByte
      0002A0 84               [ 1]  589 	pop	a
                                    590 ;	../src/mmcsd.c: 931: return SD_RESPONSE_NO_ERROR;
      0002A1 4F               [ 1]  591 	clr	a
      0002A2                        592 00116$:
                                    593 ;	../src/mmcsd.c: 932: }
      0002A2 5B 0A            [ 2]  594 	addw	sp, #10
      0002A4 81               [ 4]  595 	ret
                                    596 ;	../src/mmcsd.c: 941: uint8_t SD_WriteByte(uint8_t Data)
                                    597 ;	-----------------------------------------
                                    598 ;	 function SD_WriteByte
                                    599 ;	-----------------------------------------
      0002A5                        600 _SD_WriteByte:
                                    601 ;	../src/mmcsd.c: 944: while ((SPI->SR & SPI_FLAG_TXE) == 0)
      0002A5                        602 00101$:
      0002A5 C6 52 03         [ 1]  603 	ld	a, 0x5203
      0002A8 A5 02            [ 1]  604 	bcp	a, #0x02
      0002AA 27 F9            [ 1]  605 	jreq	00101$
                                    606 ;	../src/mmcsd.c: 948: SPI->DR = (Data);
      0002AC AE 52 04         [ 2]  607 	ldw	x, #0x5204
      0002AF 7B 03            [ 1]  608 	ld	a, (0x03, sp)
      0002B1 F7               [ 1]  609 	ld	(x), a
                                    610 ;	../src/mmcsd.c: 951: while ((SPI->SR & SPI_FLAG_RXNE) == 0)
      0002B2                        611 00104$:
      0002B2 C6 52 03         [ 1]  612 	ld	a, 0x5203
      0002B5 44               [ 1]  613 	srl	a
      0002B6 24 FA            [ 1]  614 	jrnc	00104$
                                    615 ;	../src/mmcsd.c: 955: return SPI->DR;
      0002B8 C6 52 04         [ 1]  616 	ld	a, 0x5204
                                    617 ;	../src/mmcsd.c: 956: }
      0002BB 81               [ 4]  618 	ret
                                    619 ;	../src/mmcsd.c: 963: uint8_t SD_ReadByte(void)
                                    620 ;	-----------------------------------------
                                    621 ;	 function SD_ReadByte
                                    622 ;	-----------------------------------------
      0002BC                        623 _SD_ReadByte:
                                    624 ;	../src/mmcsd.c: 968: while ((SPI->SR & SPI_FLAG_TXE) == 0)
      0002BC                        625 00101$:
      0002BC C6 52 03         [ 1]  626 	ld	a, 0x5203
      0002BF A5 02            [ 1]  627 	bcp	a, #0x02
      0002C1 27 F9            [ 1]  628 	jreq	00101$
                                    629 ;	../src/mmcsd.c: 971: SPI->DR = SD_DUMMY_BYTE;
      0002C3 35 FF 52 04      [ 1]  630 	mov	0x5204+0, #0xff
                                    631 ;	../src/mmcsd.c: 974: while ((SPI->SR & SPI_FLAG_RXNE) == 0)
      0002C7                        632 00104$:
      0002C7 C6 52 03         [ 1]  633 	ld	a, 0x5203
      0002CA 44               [ 1]  634 	srl	a
      0002CB 24 FA            [ 1]  635 	jrnc	00104$
                                    636 ;	../src/mmcsd.c: 977: Data = (uint8_t)SPI->DR;
      0002CD C6 52 04         [ 1]  637 	ld	a, 0x5204
                                    638 ;	../src/mmcsd.c: 980: return Data;
                                    639 ;	../src/mmcsd.c: 981: }
      0002D0 81               [ 4]  640 	ret
                                    641 ;	../src/mmcsd.c: 1025: void SD_LowLevel_Init(void)
                                    642 ;	-----------------------------------------
                                    643 ;	 function SD_LowLevel_Init
                                    644 ;	-----------------------------------------
      0002D1                        645 _SD_LowLevel_Init:
                                    646 ;	../src/mmcsd.c: 1035: SPI->CR1 = SPI_FIRSTBIT_MSB | SPI_BAUDRATEPRESCALER_64|SPI_CLOCKPOLARITY_HIGH | SPI_CLOCKPHASE_2EDGE;
      0002D1 35 2B 52 00      [ 1]  647 	mov	0x5200+0, #0x2b
                                    648 ;	../src/mmcsd.c: 1037: SPI->CR2 = SPI_DATADIRECTION_2LINES_FULLDUPLEX|SPI_NSS_SOFT;
      0002D5 35 02 52 01      [ 1]  649 	mov	0x5201+0, #0x02
                                    650 ;	../src/mmcsd.c: 1038: SPI->CR2 |= SPI_CR2_SSI;
      0002D9 72 10 52 01      [ 1]  651 	bset	20993, #0
                                    652 ;	../src/mmcsd.c: 1040: SPI->CR1 |= SPI_MODE_MASTER;
      0002DD 72 14 52 00      [ 1]  653 	bset	20992, #2
                                    654 ;	../src/mmcsd.c: 1042: SPI->CRCPR = 0x07;
      0002E1 35 07 52 05      [ 1]  655 	mov	0x5205+0, #0x07
                                    656 ;	../src/mmcsd.c: 1045: SPI->CR1 |= SPI_CR1_SPE;
      0002E5 72 1C 52 00      [ 1]  657 	bset	20992, #6
                                    658 ;	../src/mmcsd.c: 1049: SD_CS_GPIO_PORT->CR2 &= (~SD_CS_PIN); //Reset corresponding bit
      0002E9 72 19 50 0E      [ 1]  659 	bres	20494, #4
                                    660 ;	../src/mmcsd.c: 1050: SD_CS_GPIO_PORT->ODR |= SD_CS_PIN; // high level
      0002ED 72 18 50 0A      [ 1]  661 	bset	20490, #4
                                    662 ;	../src/mmcsd.c: 1051: SD_CS_GPIO_PORT->DDR |= SD_CS_PIN; // output mode 
      0002F1 72 18 50 0C      [ 1]  663 	bset	20492, #4
                                    664 ;	../src/mmcsd.c: 1052: SD_CS_GPIO_PORT->CR1 &= ~SD_CS_PIN; //open drain here
      0002F5 72 19 50 0D      [ 1]  665 	bres	20493, #4
                                    666 ;	../src/mmcsd.c: 1053: }
      0002F9 81               [ 4]  667 	ret
                                    668 	.area CODE
                                    669 	.area CONST
                                    670 	.area INITIALIZER
                                    671 	.area CABS (ABS)
