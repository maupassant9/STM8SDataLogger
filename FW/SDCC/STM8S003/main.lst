                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _SetLedMode
                                     13 	.globl _LedMatrixInit
                                     14 	.globl _pf_write
                                     15 	.globl _pf_read
                                     16 	.globl _pf_open
                                     17 	.globl _pf_mount
                                     18 	.globl _adcInit
                                     19 	.globl _dly
                                     20 	.globl _sysTickInit
                                     21 	.globl _loggerCfg
                                     22 	.globl _assert_failed
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
      000000                         27 _cfg:
      000000                         28 	.ds 13
      00000D                         29 _loggerCfg::
      00000D                         30 	.ds 15
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area INITIALIZED
      000000                         35 _blkCnt:
      000000                         36 	.ds 1
      000001                         37 _fileBlkCnt:
      000001                         38 	.ds 4
      000005                         39 _fileNoCnt:
      000005                         40 	.ds 2
                                     41 ;--------------------------------------------------------
                                     42 ; Stack segment in internal ram 
                                     43 ;--------------------------------------------------------
                                     44 	.area	SSEG
      000000                         45 __start__stack:
      000000                         46 	.ds	1
                                     47 
                                     48 ;--------------------------------------------------------
                                     49 ; absolute external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DABS (ABS)
                                     52 
                                     53 ; default segment ordering for linker
                                     54 	.area HOME
                                     55 	.area GSINIT
                                     56 	.area GSFINAL
                                     57 	.area CONST
                                     58 	.area INITIALIZER
                                     59 	.area CODE
                                     60 
                                     61 ;--------------------------------------------------------
                                     62 ; interrupt vector 
                                     63 ;--------------------------------------------------------
                                     64 	.area HOME
      000000                         65 __interrupt_vect:
      000000 82v00u00u00             66 	int s_GSINIT ; reset
      000004 82v00u00u00             67 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             68 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             69 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             70 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             71 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             72 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             73 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             74 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00             75 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00             76 	int 0x000000 ; int8
      00002C 82 00 00 00             77 	int 0x000000 ; int9
      000030 82v00u00u00             78 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00             79 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00             80 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00             81 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00             82 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82 00 00 00             83 	int 0x000000 ; int15
      000048 82 00 00 00             84 	int 0x000000 ; int16
      00004C 82v00u00u00             85 	int _UART1_TX_IRQHandler ; int17
      000050 82v00u00u00             86 	int _UART1_RX_IRQHandler ; int18
      000054 82v00u00u00             87 	int _I2C_IRQHandler ; int19
      000058 82 00 00 00             88 	int 0x000000 ; int20
      00005C 82 00 00 00             89 	int 0x000000 ; int21
      000060 82v00u00u00             90 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00             91 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00             92 	int _EEPROM_EEC_IRQHandler ; int24
                                     93 ;--------------------------------------------------------
                                     94 ; global & static initialisations
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME
                                     97 	.area GSINIT
                                     98 	.area GSFINAL
                                     99 	.area GSINIT
      000000                        100 __sdcc_init_data:
                                    101 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  102 	ldw x, #l_DATA
      000003 27 07            [ 1]  103 	jreq	00002$
      000005                        104 00001$:
      000005 72 4FuFFuFF      [ 1]  105 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  106 	decw x
      00000A 26 F9            [ 1]  107 	jrne	00001$
      00000C                        108 00002$:
      00000C AEr00r00         [ 2]  109 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  110 	jreq	00004$
      000011                        111 00003$:
      000011 D6uFFuFF         [ 1]  112 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  113 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  114 	decw	x
      000018 26 F7            [ 1]  115 	jrne	00003$
      00001A                        116 00004$:
                                    117 ; stm8_genXINIT() end
                                    118 	.area GSFINAL
      000000 CCr00r6C         [ 2]  119 	jp	__sdcc_program_startup
                                    120 ;--------------------------------------------------------
                                    121 ; Home
                                    122 ;--------------------------------------------------------
                                    123 	.area HOME
                                    124 	.area HOME
      00006C                        125 __sdcc_program_startup:
      00006C CCr00r00         [ 2]  126 	jp	_main
                                    127 ;	return from main will return to caller
                                    128 ;--------------------------------------------------------
                                    129 ; code
                                    130 ;--------------------------------------------------------
                                    131 	.area CODE
                                    132 ;	../src/main.c: 100: void main( void )
                                    133 ;	-----------------------------------------
                                    134 ;	 function main
                                    135 ;	-----------------------------------------
      000000                        136 _main:
      000000 52 34            [ 2]  137 	sub	sp, #52
                                    138 ;	../src/main.c: 110: clkInit();
      000002 CDr04r50         [ 4]  139 	call	_clkInit
                                    140 ;	../src/main.c: 111: LedMatrixInit();
      000005 CDr00r00         [ 4]  141 	call	_LedMatrixInit
                                    142 ;	../src/main.c: 112: sysTickInit();
      000008 CDr00r00         [ 4]  143 	call	_sysTickInit
                                    144 ;	../src/main.c: 115: enableInterrupts();
      00000B 9A               [ 1]  145 	rim
                                    146 ;	../src/main.c: 117: SetLedMode(0, LED_ON);
      00000C 4B 03            [ 1]  147 	push	#0x03
      00000E 4B 00            [ 1]  148 	push	#0x00
      000010 CDr00r00         [ 4]  149 	call	_SetLedMode
      000013 85               [ 2]  150 	popw	x
                                    151 ;	../src/main.c: 118: dly(100000);
      000014 4B A0            [ 1]  152 	push	#0xa0
      000016 4B 86            [ 1]  153 	push	#0x86
      000018 4B 01            [ 1]  154 	push	#0x01
      00001A 4B 00            [ 1]  155 	push	#0x00
      00001C CDr00r00         [ 4]  156 	call	_dly
      00001F 5B 04            [ 2]  157 	addw	sp, #4
                                    158 ;	../src/main.c: 124: res |= pf_mount(&fid);	
      000021 96               [ 1]  159 	ldw	x, sp
      000022 1C 00 03         [ 2]  160 	addw	x, #3
      000025 89               [ 2]  161 	pushw	x
      000026 CDr00r00         [ 4]  162 	call	_pf_mount
      000029 85               [ 2]  163 	popw	x
      00002A 6B 34            [ 1]  164 	ld	(0x34, sp), a
                                    165 ;	../src/main.c: 125: res |= pf_open("CFG");
      00002C 4Br00            [ 1]  166 	push	#<(___str_0+0)
      00002E 4Bs00            [ 1]  167 	push	#((___str_0+0) >> 8)
      000030 CDr00r00         [ 4]  168 	call	_pf_open
      000033 85               [ 2]  169 	popw	x
      000034 1A 34            [ 1]  170 	or	a, (0x34, sp)
      000036 6B 34            [ 1]  171 	ld	(0x34, sp), a
                                    172 ;	../src/main.c: 126: res |= pf_read(cfg, 13 , &pbr);
      000038 96               [ 1]  173 	ldw	x, sp
      000039 5C               [ 1]  174 	incw	x
      00003A 89               [ 2]  175 	pushw	x
      00003B 4B 0D            [ 1]  176 	push	#0x0d
      00003D 4B 00            [ 1]  177 	push	#0x00
      00003F 4Br00            [ 1]  178 	push	#<(_cfg+0)
      000041 4Bs00            [ 1]  179 	push	#((_cfg+0) >> 8)
      000043 CDr00r00         [ 4]  180 	call	_pf_read
      000046 5B 06            [ 2]  181 	addw	sp, #6
      000048 1A 34            [ 1]  182 	or	a, (0x34, sp)
      00004A 6B 34            [ 1]  183 	ld	(0x34, sp), a
                                    184 ;	../src/main.c: 128: res |= GetCfg(cfg, &loggerCfg);
      00004C 4Br0D            [ 1]  185 	push	#<(_loggerCfg+0)
      00004E 4Bs00            [ 1]  186 	push	#((_loggerCfg+0) >> 8)
      000050 4Br00            [ 1]  187 	push	#<(_cfg+0)
      000052 4Bs00            [ 1]  188 	push	#((_cfg+0) >> 8)
      000054 CDr03r28         [ 4]  189 	call	_GetCfg
      000057 5B 04            [ 2]  190 	addw	sp, #4
      000059 9F               [ 1]  191 	ld	a, xl
      00005A 1A 34            [ 1]  192 	or	a, (0x34, sp)
      00005C 6B 30            [ 1]  193 	ld	(0x30, sp), a
                                    194 ;	../src/main.c: 132: fileBlkCnt = loggerCfg.fileSzInBlock;
      00005E AEr00r14         [ 2]  195 	ldw	x, #(_loggerCfg+0)+7
      000061 1F 31            [ 2]  196 	ldw	(0x31, sp), x
                                    197 ;	../src/main.c: 136: res |= pf_open(loggerCfg.firstFileName);
      000063 AEr00r0F         [ 2]  198 	ldw	x, #(_loggerCfg+0)+2
      000066 1F 33            [ 2]  199 	ldw	(0x33, sp), x
                                    200 ;	../src/main.c: 130: if(FR_OK == res){
      000068 0D 30            [ 1]  201 	tnz	(0x30, sp)
      00006A 26 45            [ 1]  202 	jrne	00105$
                                    203 ;	../src/main.c: 132: fileBlkCnt = loggerCfg.fileSzInBlock;
      00006C 1E 31            [ 2]  204 	ldw	x, (0x31, sp)
      00006E 90 93            [ 1]  205 	ldw	y, x
      000070 90 EE 02         [ 2]  206 	ldw	y, (0x2, y)
      000073 FE               [ 2]  207 	ldw	x, (x)
      000074 90 CFu00u03      [ 2]  208 	ldw	_fileBlkCnt+2, y
      000078 CFu00u01         [ 2]  209 	ldw	_fileBlkCnt+0, x
                                    210 ;	../src/main.c: 133: fileNoCnt = loggerCfg.fileNo;
      00007B CEu00u18         [ 2]  211 	ldw	x, _loggerCfg+11
      00007E CFu00u05         [ 2]  212 	ldw	_fileNoCnt+0, x
                                    213 ;	../src/main.c: 134: SetLedMode(1, LED_ON);
      000081 4B 03            [ 1]  214 	push	#0x03
      000083 4B 01            [ 1]  215 	push	#0x01
      000085 CDr00r00         [ 4]  216 	call	_SetLedMode
      000088 85               [ 2]  217 	popw	x
                                    218 ;	../src/main.c: 136: res |= pf_open(loggerCfg.firstFileName);
      000089 1E 33            [ 2]  219 	ldw	x, (0x33, sp)
      00008B 89               [ 2]  220 	pushw	x
      00008C CDr00r00         [ 4]  221 	call	_pf_open
      00008F 85               [ 2]  222 	popw	x
                                    223 ;	../src/main.c: 138: if(FR_OK == res){
      000090 1A 30            [ 1]  224 	or	a, (0x30, sp)
      000092 26 06            [ 1]  225 	jrne	00102$
                                    226 ;	../src/main.c: 141: fsm.state = S0_RST;
      000094 0F 2D            [ 1]  227 	clr	(0x2d, sp)
                                    228 ;	../src/main.c: 142: fsm.error = NO_ERR;
      000096 0F 2E            [ 1]  229 	clr	(0x2e, sp)
      000098 20 10            [ 2]  230 	jra	00103$
      00009A                        231 00102$:
                                    232 ;	../src/main.c: 145: fsm.state = S4_ERR;
      00009A A6 04            [ 1]  233 	ld	a, #0x04
      00009C 6B 2D            [ 1]  234 	ld	(0x2d, sp), a
                                    235 ;	../src/main.c: 146: fsm.error = ERR_CARD_INIT;
      00009E A6 01            [ 1]  236 	ld	a, #0x01
      0000A0 6B 2E            [ 1]  237 	ld	(0x2e, sp), a
                                    238 ;	../src/main.c: 147: SetLedMode(1, LED_TOGGLE_FAST);
      0000A2 4B 02            [ 1]  239 	push	#0x02
      0000A4 4B 01            [ 1]  240 	push	#0x01
      0000A6 CDr00r00         [ 4]  241 	call	_SetLedMode
      0000A9 85               [ 2]  242 	popw	x
      0000AA                        243 00103$:
                                    244 ;	../src/main.c: 150: disableInterrupts();
      0000AA 9B               [ 1]  245 	sim
                                    246 ;	../src/main.c: 151: adcInit();
      0000AB CDr00r00         [ 4]  247 	call	_adcInit
                                    248 ;	../src/main.c: 153: enableInterrupts();
      0000AE 9A               [ 1]  249 	rim
      0000AF 20 08            [ 2]  250 	jra	00106$
      0000B1                        251 00105$:
                                    252 ;	../src/main.c: 156: fsm.state = S4_ERR;
      0000B1 A6 04            [ 1]  253 	ld	a, #0x04
      0000B3 6B 2D            [ 1]  254 	ld	(0x2d, sp), a
                                    255 ;	../src/main.c: 157: fsm.error = ERR_CARD_INIT;
      0000B5 A6 01            [ 1]  256 	ld	a, #0x01
      0000B7 6B 2E            [ 1]  257 	ld	(0x2e, sp), a
      0000B9                        258 00106$:
                                    259 ;	../src/main.c: 159: SetLedMode(0, LED_TOGGLE_SLOW);
      0000B9 4B 01            [ 1]  260 	push	#0x01
      0000BB 4B 00            [ 1]  261 	push	#0x00
      0000BD CDr00r00         [ 4]  262 	call	_SetLedMode
      0000C0 85               [ 2]  263 	popw	x
                                    264 ;	../src/main.c: 161: while(1){
      0000C1 16 31            [ 2]  265 	ldw	y, (0x31, sp)
      0000C3 17 2F            [ 2]  266 	ldw	(0x2f, sp), y
      0000C5 16 33            [ 2]  267 	ldw	y, (0x33, sp)
      0000C7 17 31            [ 2]  268 	ldw	(0x31, sp), y
      0000C9                        269 00137$:
                                    270 ;	../src/main.c: 166: switch (fsm.state){
      0000C9 7B 2D            [ 1]  271 	ld	a, (0x2d, sp)
      0000CB A1 06            [ 1]  272 	cp	a, #0x06
      0000CD 22 FA            [ 1]  273 	jrugt	00137$
      0000CF 5F               [ 1]  274 	clrw	x
      0000D0 97               [ 1]  275 	ld	xl, a
      0000D1 58               [ 2]  276 	sllw	x
      0000D2 DEu00uD6         [ 2]  277 	ldw	x, (#00199$, x)
      0000D5 FC               [ 2]  278 	jp	(x)
      0000D6                        279 00199$:
      0000D6r00rE4                  280 	.dw	#00107$
      0000D8r01r0F                  281 	.dw	#00117$
      0000DAr01r0F                  282 	.dw	#00117$
      0000DCr01r1A                  283 	.dw	#00118$
      0000DEr01r56                  284 	.dw	#00125$
      0000E0r01r60                  285 	.dw	#00129$
      0000E2r00rC9                  286 	.dw	#00137$
                                    287 ;	../src/main.c: 167: case S0_RST:
      0000E4                        288 00107$:
                                    289 ;	../src/main.c: 170: if( 0x3 == buffer_rdy ){
      0000E4 C6u00u00         [ 1]  290 	ld	a, _buffer_rdy+0
      0000E7 A1 03            [ 1]  291 	cp	a, #0x03
      0000E9 26 0B            [ 1]  292 	jrne	00114$
                                    293 ;	../src/main.c: 173: fsm.state = S4_ERR;
      0000EB A6 04            [ 1]  294 	ld	a, #0x04
      0000ED 6B 2D            [ 1]  295 	ld	(0x2d, sp), a
                                    296 ;	../src/main.c: 174: fsm.error = ERR_BUFF_OVERLAP;
      0000EF 96               [ 1]  297 	ldw	x, sp
      0000F0 A6 05            [ 1]  298 	ld	a, #0x05
      0000F2 E7 2E            [ 1]  299 	ld	(46, x), a
      0000F4 20 D3            [ 2]  300 	jra	00137$
      0000F6                        301 00114$:
                                    302 ;	../src/main.c: 175: } else if (0x01 == buffer_rdy) {
      0000F6 C6u00u00         [ 1]  303 	ld	a, _buffer_rdy+0
      0000F9 4A               [ 1]  304 	dec	a
      0000FA 26 06            [ 1]  305 	jrne	00111$
                                    306 ;	../src/main.c: 177: fsm.state = S1_WR_BUF0;
      0000FC A6 01            [ 1]  307 	ld	a, #0x01
      0000FE 6B 2D            [ 1]  308 	ld	(0x2d, sp), a
      000100 20 C7            [ 2]  309 	jra	00137$
      000102                        310 00111$:
                                    311 ;	../src/main.c: 178: } else if ( 0x02 == buffer_rdy) {
      000102 C6u00u00         [ 1]  312 	ld	a, _buffer_rdy+0
      000105 A1 02            [ 1]  313 	cp	a, #0x02
      000107 26 C0            [ 1]  314 	jrne	00137$
                                    315 ;	../src/main.c: 180: fsm.state = S2_WR_BUF1;
      000109 A6 02            [ 1]  316 	ld	a, #0x02
      00010B 6B 2D            [ 1]  317 	ld	(0x2d, sp), a
                                    318 ;	../src/main.c: 182: break;
      00010D 20 BA            [ 2]  319 	jra	00137$
                                    320 ;	../src/main.c: 184: case S2_WR_BUF1:
      00010F                        321 00117$:
                                    322 ;	../src/main.c: 186: Wr2SD(&fsm);
      00010F 96               [ 1]  323 	ldw	x, sp
      000110 1C 00 2D         [ 2]  324 	addw	x, #45
      000113 89               [ 2]  325 	pushw	x
      000114 CDr01r6D         [ 4]  326 	call	_Wr2SD
      000117 85               [ 2]  327 	popw	x
                                    328 ;	../src/main.c: 187: break;
      000118 20 AF            [ 2]  329 	jra	00137$
                                    330 ;	../src/main.c: 188: case S3_NXT_FILE:
      00011A                        331 00118$:
                                    332 ;	../src/main.c: 189: fileBlkCnt = loggerCfg.fileSzInBlock;
      00011A 1E 2F            [ 2]  333 	ldw	x, (0x2f, sp)
      00011C 90 93            [ 1]  334 	ldw	y, x
      00011E 90 EE 02         [ 2]  335 	ldw	y, (0x2, y)
      000121 FE               [ 2]  336 	ldw	x, (x)
      000122 90 CFu00u03      [ 2]  337 	ldw	_fileBlkCnt+2, y
      000126 CFu00u01         [ 2]  338 	ldw	_fileBlkCnt+0, x
                                    339 ;	../src/main.c: 191: if(--fileNoCnt != 0){
      000129 CEu00u05         [ 2]  340 	ldw	x, _fileNoCnt+0
      00012C 5A               [ 2]  341 	decw	x
      00012D CFu00u05         [ 2]  342 	ldw	_fileNoCnt+0, x
      000130 27 1D            [ 1]  343 	jreq	00123$
                                    344 ;	../src/main.c: 193: GetNxtFileName(loggerCfg.firstFileName);
      000132 1E 31            [ 2]  345 	ldw	x, (0x31, sp)
      000134 89               [ 2]  346 	pushw	x
      000135 CDr02r12         [ 4]  347 	call	_GetNxtFileName
      000138 85               [ 2]  348 	popw	x
                                    349 ;	../src/main.c: 195: res = pf_open(loggerCfg.firstFileName);
      000139 1E 33            [ 2]  350 	ldw	x, (0x33, sp)
      00013B 89               [ 2]  351 	pushw	x
      00013C CDr00r00         [ 4]  352 	call	_pf_open
      00013F 85               [ 2]  353 	popw	x
                                    354 ;	../src/main.c: 196: if( FR_OK != res ){
      000140 4D               [ 1]  355 	tnz	a
      000141 27 07            [ 1]  356 	jreq	00120$
                                    357 ;	../src/main.c: 197: fsm.state = S4_ERR;
      000143 A6 04            [ 1]  358 	ld	a, #0x04
      000145 6B 2D            [ 1]  359 	ld	(0x2d, sp), a
      000147 CCr00rC9         [ 2]  360 	jp	00137$
      00014A                        361 00120$:
                                    362 ;	../src/main.c: 200: fsm.state = S0_RST;
      00014A 0F 2D            [ 1]  363 	clr	(0x2d, sp)
      00014C CCr00rC9         [ 2]  364 	jp	00137$
      00014F                        365 00123$:
                                    366 ;	../src/main.c: 206: fsm.state = S5_COMPLETE;
      00014F A6 05            [ 1]  367 	ld	a, #0x05
      000151 6B 2D            [ 1]  368 	ld	(0x2d, sp), a
                                    369 ;	../src/main.c: 209: break;
      000153 CCr00rC9         [ 2]  370 	jp	00137$
                                    371 ;	../src/main.c: 211: case S4_ERR:
      000156                        372 00125$:
                                    373 ;	../src/main.c: 212: SetLedMode(1, LED_TOGGLE_FAST);
      000156 4B 02            [ 1]  374 	push	#0x02
      000158 4B 01            [ 1]  375 	push	#0x01
      00015A CDr00r00         [ 4]  376 	call	_SetLedMode
      00015D 85               [ 2]  377 	popw	x
                                    378 ;	../src/main.c: 213: while(1); break;
      00015E                        379 00127$:
      00015E 20 FE            [ 2]  380 	jra	00127$
                                    381 ;	../src/main.c: 214: case S5_COMPLETE:
      000160                        382 00129$:
                                    383 ;	../src/main.c: 215: SetLedMode(0, LED_ON);
      000160 4B 03            [ 1]  384 	push	#0x03
      000162 4B 00            [ 1]  385 	push	#0x00
      000164 CDr00r00         [ 4]  386 	call	_SetLedMode
      000167 85               [ 2]  387 	popw	x
                                    388 ;	../src/main.c: 216: while(1);
      000168                        389 00131$:
      000168 20 FE            [ 2]  390 	jra	00131$
                                    391 ;	../src/main.c: 221: }
                                    392 ;	../src/main.c: 223: }
      00016A 5B 34            [ 2]  393 	addw	sp, #52
      00016C 81               [ 4]  394 	ret
                                    395 ;	../src/main.c: 236: static void Wr2SD( fsm_t * pfsm ){
                                    396 ;	-----------------------------------------
                                    397 ;	 function Wr2SD
                                    398 ;	-----------------------------------------
      00016D                        399 _Wr2SD:
      00016D 52 06            [ 2]  400 	sub	sp, #6
                                    401 ;	../src/main.c: 243: if( S1_WR_BUF0 == pfsm->state){
      00016F 16 09            [ 2]  402 	ldw	y, (0x09, sp)
      000171 17 03            [ 2]  403 	ldw	(0x03, sp), y
      000173 93               [ 1]  404 	ldw	x, y
      000174 F6               [ 1]  405 	ld	a, (x)
      000175 4A               [ 1]  406 	dec	a
      000176 26 07            [ 1]  407 	jrne	00102$
                                    408 ;	../src/main.c: 244: pBuf = adcBuffer0; bufNo = 0;
      000178 90 AEr00r00      [ 2]  409 	ldw	y, #_adcBuffer0+0
      00017C 5F               [ 1]  410 	clrw	x
      00017D 20 07            [ 2]  411 	jra	00103$
      00017F                        412 00102$:
                                    413 ;	../src/main.c: 246: pBuf = adcBuffer1; bufNo = 1;
      00017F 90 AEr00r00      [ 2]  414 	ldw	y, #(_adcBuffer1+0)
      000183 A6 01            [ 1]  415 	ld	a, #0x01
      000185 97               [ 1]  416 	ld	xl, a
      000186                        417 00103$:
                                    418 ;	../src/main.c: 248: RELEASE_BUFF_FOR_WR(bufNo); //clear this flag
      000186 A6 01            [ 1]  419 	ld	a, #0x01
      000188 88               [ 1]  420 	push	a
      000189 9F               [ 1]  421 	ld	a, xl
      00018A 4D               [ 1]  422 	tnz	a
      00018B 27 05            [ 1]  423 	jreq	00143$
      00018D                        424 00142$:
      00018D 08 01            [ 1]  425 	sll	(1, sp)
      00018F 4A               [ 1]  426 	dec	a
      000190 26 FB            [ 1]  427 	jrne	00142$
      000192                        428 00143$:
      000192 84               [ 1]  429 	pop	a
      000193 43               [ 1]  430 	cpl	a
      000194 C4u00u00         [ 1]  431 	and	a, _buffer_rdy+0
      000197 C7u00u00         [ 1]  432 	ld	_buffer_rdy+0, a
                                    433 ;	../src/main.c: 252: res = pf_write((void*)pBuf,BUFFER_SZ_IN_BYTES, &pbr);
      00019A 96               [ 1]  434 	ldw	x, sp
      00019B 5C               [ 1]  435 	incw	x
      00019C 89               [ 2]  436 	pushw	x
      00019D 4B 00            [ 1]  437 	push	#0x00
      00019F 4B 01            [ 1]  438 	push	#0x01
      0001A1 90 89            [ 2]  439 	pushw	y
      0001A3 CDr00r00         [ 4]  440 	call	_pf_write
      0001A6 5B 06            [ 2]  441 	addw	sp, #6
                                    442 ;	../src/main.c: 259: pfsm->error = ERR_WR_DATA;
      0001A8 1E 03            [ 2]  443 	ldw	x, (0x03, sp)
      0001AA 5C               [ 1]  444 	incw	x
      0001AB 1F 05            [ 2]  445 	ldw	(0x05, sp), x
                                    446 ;	../src/main.c: 256: if(FR_OK != res){
      0001AD 4D               [ 1]  447 	tnz	a
      0001AE 27 0C            [ 1]  448 	jreq	00105$
                                    449 ;	../src/main.c: 259: pfsm->error = ERR_WR_DATA;
      0001B0 1E 05            [ 2]  450 	ldw	x, (0x05, sp)
      0001B2 A6 02            [ 1]  451 	ld	a, #0x02
      0001B4 F7               [ 1]  452 	ld	(x), a
                                    453 ;	../src/main.c: 260: pfsm->state = S4_ERR;
      0001B5 1E 03            [ 2]  454 	ldw	x, (0x03, sp)
      0001B7 A6 04            [ 1]  455 	ld	a, #0x04
      0001B9 F7               [ 1]  456 	ld	(x), a
                                    457 ;	../src/main.c: 261: return;
      0001BA 20 53            [ 2]  458 	jra	00112$
      0001BC                        459 00105$:
                                    460 ;	../src/main.c: 264: if(NO_BUFF_PER_BLK == ++blkCnt){
      0001BC 72 5Cu00u00      [ 1]  461 	inc	_blkCnt+0
      0001C0 C6u00u00         [ 1]  462 	ld	a, _blkCnt+0
      0001C3 A1 02            [ 1]  463 	cp	a, #0x02
      0001C5 26 45            [ 1]  464 	jrne	00111$
                                    465 ;	../src/main.c: 266: blkCnt = 0;
      0001C7 72 5Fu00u00      [ 1]  466 	clr	_blkCnt+0
                                    467 ;	../src/main.c: 267: res = pf_write(0,0,&pbr);
      0001CB 96               [ 1]  468 	ldw	x, sp
      0001CC 5C               [ 1]  469 	incw	x
      0001CD 89               [ 2]  470 	pushw	x
      0001CE 5F               [ 1]  471 	clrw	x
      0001CF 89               [ 2]  472 	pushw	x
      0001D0 5F               [ 1]  473 	clrw	x
      0001D1 89               [ 2]  474 	pushw	x
      0001D2 CDr00r00         [ 4]  475 	call	_pf_write
      0001D5 5B 06            [ 2]  476 	addw	sp, #6
                                    477 ;	../src/main.c: 270: if(FR_OK != res){
      0001D7 4D               [ 1]  478 	tnz	a
      0001D8 27 0C            [ 1]  479 	jreq	00107$
                                    480 ;	../src/main.c: 272: pfsm->error = ERR_WR_NO_RESP;
      0001DA 1E 05            [ 2]  481 	ldw	x, (0x05, sp)
      0001DC A6 03            [ 1]  482 	ld	a, #0x03
      0001DE F7               [ 1]  483 	ld	(x), a
                                    484 ;	../src/main.c: 273: pfsm->state = S4_ERR;
      0001DF 1E 03            [ 2]  485 	ldw	x, (0x03, sp)
      0001E1 A6 04            [ 1]  486 	ld	a, #0x04
      0001E3 F7               [ 1]  487 	ld	(x), a
                                    488 ;	../src/main.c: 274: return;
      0001E4 20 29            [ 2]  489 	jra	00112$
      0001E6                        490 00107$:
                                    491 ;	../src/main.c: 277: if(0 == --fileBlkCnt){
      0001E6 CEu00u03         [ 2]  492 	ldw	x, _fileBlkCnt+2
      0001E9 1D 00 01         [ 2]  493 	subw	x, #0x0001
      0001EC 90 CEu00u01      [ 2]  494 	ldw	y, _fileBlkCnt+0
      0001F0 24 02            [ 1]  495 	jrnc	00149$
      0001F2 90 5A            [ 2]  496 	decw	y
      0001F4                        497 00149$:
      0001F4 CFu00u03         [ 2]  498 	ldw	_fileBlkCnt+2, x
      0001F7 90 CFu00u01      [ 2]  499 	ldw	_fileBlkCnt+0, y
      0001FB CEu00u03         [ 2]  500 	ldw	x, _fileBlkCnt+2
      0001FE 26 0C            [ 1]  501 	jrne	00111$
      000200 CEu00u01         [ 2]  502 	ldw	x, _fileBlkCnt+0
      000203 26 07            [ 1]  503 	jrne	00111$
                                    504 ;	../src/main.c: 280: pfsm->state = S3_NXT_FILE;
      000205 1E 03            [ 2]  505 	ldw	x, (0x03, sp)
      000207 A6 03            [ 1]  506 	ld	a, #0x03
      000209 F7               [ 1]  507 	ld	(x), a
                                    508 ;	../src/main.c: 281: return;
      00020A 20 03            [ 2]  509 	jra	00112$
      00020C                        510 00111$:
                                    511 ;	../src/main.c: 286: pfsm->state = S0_RST; 
      00020C 1E 03            [ 2]  512 	ldw	x, (0x03, sp)
      00020E 7F               [ 1]  513 	clr	(x)
      00020F                        514 00112$:
                                    515 ;	../src/main.c: 287: }
      00020F 5B 06            [ 2]  516 	addw	sp, #6
      000211 81               [ 4]  517 	ret
                                    518 ;	../src/main.c: 300: static void GetNxtFileName( char * fname){
                                    519 ;	-----------------------------------------
                                    520 ;	 function GetNxtFileName
                                    521 ;	-----------------------------------------
      000212                        522 _GetNxtFileName:
      000212 52 05            [ 2]  523 	sub	sp, #5
                                    524 ;	../src/main.c: 301: uint8_t val = 0;
      000214 0F 01            [ 1]  525 	clr	(0x01, sp)
                                    526 ;	../src/main.c: 303: if(0x39 == fname[3]){
      000216 1E 08            [ 2]  527 	ldw	x, (0x08, sp)
      000218 E6 03            [ 1]  528 	ld	a, (0x3, x)
                                    529 ;	../src/main.c: 304: val = 0x01;
      00021A A0 39            [ 1]  530 	sub	a, #0x39
      00021C 26 03            [ 1]  531 	jrne	00102$
      00021E 4C               [ 1]  532 	inc	a
      00021F 6B 01            [ 1]  533 	ld	(0x01, sp), a
      000221                        534 00102$:
                                    535 ;	../src/main.c: 306: if(0x39 == fname[2]) {
      000221 1E 08            [ 2]  536 	ldw	x, (0x08, sp)
      000223 E6 02            [ 1]  537 	ld	a, (0x2, x)
      000225 A1 39            [ 1]  538 	cp	a, #0x39
      000227 26 06            [ 1]  539 	jrne	00104$
                                    540 ;	../src/main.c: 307: val += 0x02;
      000229 7B 01            [ 1]  541 	ld	a, (0x01, sp)
      00022B AB 02            [ 1]  542 	add	a, #0x02
      00022D 6B 01            [ 1]  543 	ld	(0x01, sp), a
      00022F                        544 00104$:
                                    545 ;	../src/main.c: 309: if(0x39 == fname[1]) {
      00022F 1E 08            [ 2]  546 	ldw	x, (0x08, sp)
      000231 E6 01            [ 1]  547 	ld	a, (0x1, x)
      000233 A1 39            [ 1]  548 	cp	a, #0x39
      000235 26 06            [ 1]  549 	jrne	00106$
                                    550 ;	../src/main.c: 310: val += 0x04;
      000237 7B 01            [ 1]  551 	ld	a, (0x01, sp)
      000239 AB 04            [ 1]  552 	add	a, #0x04
      00023B 6B 01            [ 1]  553 	ld	(0x01, sp), a
      00023D                        554 00106$:
                                    555 ;	../src/main.c: 312: if(0x39 == fname[0]) {
      00023D 16 08            [ 2]  556 	ldw	y, (0x08, sp)
      00023F 17 02            [ 2]  557 	ldw	(0x02, sp), y
      000241 93               [ 1]  558 	ldw	x, y
      000242 F6               [ 1]  559 	ld	a, (x)
      000243 A1 39            [ 1]  560 	cp	a, #0x39
      000245 26 06            [ 1]  561 	jrne	00108$
                                    562 ;	../src/main.c: 313: val += 0x08;
      000247 7B 01            [ 1]  563 	ld	a, (0x01, sp)
      000249 AB 08            [ 1]  564 	add	a, #0x08
      00024B 6B 01            [ 1]  565 	ld	(0x01, sp), a
      00024D                        566 00108$:
                                    567 ;	../src/main.c: 317: case 0x01: fname[3] = 0x30; 
      00024D 1E 02            [ 2]  568 	ldw	x, (0x02, sp)
      00024F 1C 00 03         [ 2]  569 	addw	x, #0x0003
                                    570 ;	../src/main.c: 318: fname[2]++;break;
      000252 16 02            [ 2]  571 	ldw	y, (0x02, sp)
      000254 90 5C            [ 1]  572 	incw	y
      000256 90 5C            [ 1]  573 	incw	y
      000258 17 04            [ 2]  574 	ldw	(0x04, sp), y
                                    575 ;	../src/main.c: 316: switch(val){
      00025A 7B 01            [ 1]  576 	ld	a, (0x01, sp)
      00025C 4A               [ 1]  577 	dec	a
      00025D 27 18            [ 1]  578 	jreq	00109$
                                    579 ;	../src/main.c: 321: fname[1]++; break;
      00025F 16 02            [ 2]  580 	ldw	y, (0x02, sp)
      000261 90 5C            [ 1]  581 	incw	y
                                    582 ;	../src/main.c: 316: switch(val){
      000263 7B 01            [ 1]  583 	ld	a, (0x01, sp)
      000265 A1 03            [ 1]  584 	cp	a, #0x03
      000267 27 16            [ 1]  585 	jreq	00110$
      000269 7B 01            [ 1]  586 	ld	a, (0x01, sp)
      00026B A1 07            [ 1]  587 	cp	a, #0x07
      00026D 27 1C            [ 1]  588 	jreq	00111$
      00026F 7B 01            [ 1]  589 	ld	a, (0x01, sp)
      000271 A1 0F            [ 1]  590 	cp	a, #0x0f
      000273 27 25            [ 1]  591 	jreq	00112$
      000275 20 34            [ 2]  592 	jra	00113$
                                    593 ;	../src/main.c: 317: case 0x01: fname[3] = 0x30; 
      000277                        594 00109$:
      000277 A6 30            [ 1]  595 	ld	a, #0x30
      000279 F7               [ 1]  596 	ld	(x), a
                                    597 ;	../src/main.c: 318: fname[2]++;break;
      00027A 1E 04            [ 2]  598 	ldw	x, (0x04, sp)
      00027C 7C               [ 1]  599 	inc	(x)
      00027D 20 2D            [ 2]  600 	jra	00115$
                                    601 ;	../src/main.c: 319: case 0x03: fname[3] = 0x30; 
      00027F                        602 00110$:
      00027F A6 30            [ 1]  603 	ld	a, #0x30
      000281 F7               [ 1]  604 	ld	(x), a
                                    605 ;	../src/main.c: 320: fname[2] = 0x30; 
      000282 1E 04            [ 2]  606 	ldw	x, (0x04, sp)
      000284 A6 30            [ 1]  607 	ld	a, #0x30
      000286 F7               [ 1]  608 	ld	(x), a
                                    609 ;	../src/main.c: 321: fname[1]++; break;
      000287 90 7C            [ 1]  610 	inc	(y)
      000289 20 21            [ 2]  611 	jra	00115$
                                    612 ;	../src/main.c: 322: case 0x07: fname[3] = 0x30; 
      00028B                        613 00111$:
      00028B A6 30            [ 1]  614 	ld	a, #0x30
      00028D F7               [ 1]  615 	ld	(x), a
                                    616 ;	../src/main.c: 323: fname[2] = 0x30; 
      00028E 1E 04            [ 2]  617 	ldw	x, (0x04, sp)
                                    618 ;	../src/main.c: 324: fname[1] = 0x30; 
      000290 A6 30            [ 1]  619 	ld	a, #0x30
      000292 F7               [ 1]  620 	ld	(x), a
      000293 90 F7            [ 1]  621 	ld	(y), a
                                    622 ;	../src/main.c: 325: fname[0]++; break;
      000295 1E 02            [ 2]  623 	ldw	x, (0x02, sp)
      000297 7C               [ 1]  624 	inc	(x)
      000298 20 12            [ 2]  625 	jra	00115$
                                    626 ;	../src/main.c: 326: case 0x0f: fname[3] = 0x30; 
      00029A                        627 00112$:
      00029A A6 30            [ 1]  628 	ld	a, #0x30
      00029C F7               [ 1]  629 	ld	(x), a
                                    630 ;	../src/main.c: 327: fname[2] = 0x30; 
      00029D 1E 04            [ 2]  631 	ldw	x, (0x04, sp)
                                    632 ;	../src/main.c: 328: fname[1] = 0x30; 
      00029F A6 30            [ 1]  633 	ld	a, #0x30
      0002A1 F7               [ 1]  634 	ld	(x), a
      0002A2 90 F7            [ 1]  635 	ld	(y), a
                                    636 ;	../src/main.c: 329: fname[0] = 0x30; break;
      0002A4 1E 02            [ 2]  637 	ldw	x, (0x02, sp)
      0002A6 A6 30            [ 1]  638 	ld	a, #0x30
      0002A8 F7               [ 1]  639 	ld	(x), a
      0002A9 20 01            [ 2]  640 	jra	00115$
                                    641 ;	../src/main.c: 330: default: fname[3]++; break;
      0002AB                        642 00113$:
      0002AB 7C               [ 1]  643 	inc	(x)
                                    644 ;	../src/main.c: 331: }
      0002AC                        645 00115$:
                                    646 ;	../src/main.c: 332: }
      0002AC 5B 05            [ 2]  647 	addw	sp, #5
      0002AE 81               [ 4]  648 	ret
                                    649 ;	../src/main.c: 345: static void ConvertFileName(uint16_t firstFileName, char * fname){
                                    650 ;	-----------------------------------------
                                    651 ;	 function ConvertFileName
                                    652 ;	-----------------------------------------
      0002AF                        653 _ConvertFileName:
      0002AF 52 04            [ 2]  654 	sub	sp, #4
                                    655 ;	../src/main.c: 348: val = firstFileName/1000;
      0002B1 16 07            [ 2]  656 	ldw	y, (0x07, sp)
      0002B3 17 03            [ 2]  657 	ldw	(0x03, sp), y
      0002B5 93               [ 1]  658 	ldw	x, y
      0002B6 90 AE 03 E8      [ 2]  659 	ldw	y, #0x03e8
      0002BA 65               [ 2]  660 	divw	x, y
                                    661 ;	../src/main.c: 349: fname[0] = val + 0x30;
      0002BB 16 09            [ 2]  662 	ldw	y, (0x09, sp)
      0002BD 17 01            [ 2]  663 	ldw	(0x01, sp), y
      0002BF 9F               [ 1]  664 	ld	a, xl
      0002C0 AB 30            [ 1]  665 	add	a, #0x30
      0002C2 16 01            [ 2]  666 	ldw	y, (0x01, sp)
      0002C4 90 F7            [ 1]  667 	ld	(y), a
                                    668 ;	../src/main.c: 350: firstFileName -=  val*1000;
      0002C6 89               [ 2]  669 	pushw	x
      0002C7 4B E8            [ 1]  670 	push	#0xe8
      0002C9 4B 03            [ 1]  671 	push	#0x03
      0002CB CDr00r00         [ 4]  672 	call	__mulint
      0002CE 5B 04            [ 2]  673 	addw	sp, #4
      0002D0 50               [ 2]  674 	negw	x
      0002D1 72 FB 03         [ 2]  675 	addw	x, (0x03, sp)
                                    676 ;	../src/main.c: 351: val = firstFileName/100;
      0002D4 1F 07            [ 2]  677 	ldw	(0x07, sp), x
      0002D6 1F 03            [ 2]  678 	ldw	(0x03, sp), x
      0002D8 90 AE 00 64      [ 2]  679 	ldw	y, #0x0064
      0002DC 65               [ 2]  680 	divw	x, y
                                    681 ;	../src/main.c: 352: fname[1] = val + 0x30;
      0002DD 16 01            [ 2]  682 	ldw	y, (0x01, sp)
      0002DF 90 5C            [ 1]  683 	incw	y
      0002E1 9F               [ 1]  684 	ld	a, xl
      0002E2 AB 30            [ 1]  685 	add	a, #0x30
      0002E4 90 F7            [ 1]  686 	ld	(y), a
                                    687 ;	../src/main.c: 353: firstFileName -=  val*100;
      0002E6 89               [ 2]  688 	pushw	x
      0002E7 4B 64            [ 1]  689 	push	#0x64
      0002E9 4B 00            [ 1]  690 	push	#0x00
      0002EB CDr00r00         [ 4]  691 	call	__mulint
      0002EE 5B 04            [ 2]  692 	addw	sp, #4
      0002F0 50               [ 2]  693 	negw	x
      0002F1 72 FB 03         [ 2]  694 	addw	x, (0x03, sp)
                                    695 ;	../src/main.c: 354: val = firstFileName/10;
      0002F4 1F 07            [ 2]  696 	ldw	(0x07, sp), x
      0002F6 1F 03            [ 2]  697 	ldw	(0x03, sp), x
      0002F8 90 AE 00 0A      [ 2]  698 	ldw	y, #0x000a
      0002FC 65               [ 2]  699 	divw	x, y
                                    700 ;	../src/main.c: 355: fname[2] = val + 0x30;
      0002FD 16 01            [ 2]  701 	ldw	y, (0x01, sp)
      0002FF 72 A9 00 02      [ 2]  702 	addw	y, #0x0002
      000303 9F               [ 1]  703 	ld	a, xl
      000304 AB 30            [ 1]  704 	add	a, #0x30
      000306 90 F7            [ 1]  705 	ld	(y), a
                                    706 ;	../src/main.c: 356: firstFileName -=  val*10;
      000308 89               [ 2]  707 	pushw	x
      000309 58               [ 2]  708 	sllw	x
      00030A 58               [ 2]  709 	sllw	x
      00030B 72 FB 01         [ 2]  710 	addw	x, (1, sp)
      00030E 58               [ 2]  711 	sllw	x
      00030F 5B 02            [ 2]  712 	addw	sp, #2
      000311 50               [ 2]  713 	negw	x
      000312 72 FB 03         [ 2]  714 	addw	x, (0x03, sp)
      000315 1F 07            [ 2]  715 	ldw	(0x07, sp), x
                                    716 ;	../src/main.c: 357: fname[3] = firstFileName + 0x30;
      000317 1E 01            [ 2]  717 	ldw	x, (0x01, sp)
      000319 1C 00 03         [ 2]  718 	addw	x, #0x0003
      00031C 7B 08            [ 1]  719 	ld	a, (0x08, sp)
      00031E AB 30            [ 1]  720 	add	a, #0x30
      000320 F7               [ 1]  721 	ld	(x), a
                                    722 ;	../src/main.c: 358: fname[4] = '\0';
      000321 1E 01            [ 2]  723 	ldw	x, (0x01, sp)
      000323 6F 04            [ 1]  724 	clr	(0x0004, x)
                                    725 ;	../src/main.c: 359: }
      000325 5B 04            [ 2]  726 	addw	sp, #4
      000327 81               [ 4]  727 	ret
                                    728 ;	../src/main.c: 374: static UINT GetCfg( uint8_t * pCfgBuf,  cfg_t * pcfg){
                                    729 ;	-----------------------------------------
                                    730 ;	 function GetCfg
                                    731 ;	-----------------------------------------
      000328                        732 _GetCfg:
      000328 52 12            [ 2]  733 	sub	sp, #18
                                    734 ;	../src/main.c: 377: if(!IsValidCfgBuf(pCfgBuf)) return 1; 
      00032A 1E 15            [ 2]  735 	ldw	x, (0x15, sp)
      00032C 89               [ 2]  736 	pushw	x
      00032D CDr04r2B         [ 4]  737 	call	_IsValidCfgBuf
      000330 85               [ 2]  738 	popw	x
      000331 6B 12            [ 1]  739 	ld	(0x12, sp), a
      000333 26 05            [ 1]  740 	jrne	00102$
      000335 5F               [ 1]  741 	clrw	x
      000336 5C               [ 1]  742 	incw	x
      000337 CCr04r28         [ 2]  743 	jp	00106$
      00033A                        744 00102$:
                                    745 ;	../src/main.c: 380: pcfg->sampFreq = pCfgBuf[0]+(((uint16_t)pCfgBuf[1])<<8);
      00033A 16 17            [ 2]  746 	ldw	y, (0x17, sp)
      00033C 17 01            [ 2]  747 	ldw	(0x01, sp), y
      00033E 16 15            [ 2]  748 	ldw	y, (0x15, sp)
      000340 17 03            [ 2]  749 	ldw	(0x03, sp), y
      000342 93               [ 1]  750 	ldw	x, y
      000343 F6               [ 1]  751 	ld	a, (x)
      000344 5F               [ 1]  752 	clrw	x
      000345 97               [ 1]  753 	ld	xl, a
      000346 16 03            [ 2]  754 	ldw	y, (0x03, sp)
      000348 90 E6 01         [ 1]  755 	ld	a, (0x1, y)
      00034B 90 95            [ 1]  756 	ld	yh, a
      00034D 4F               [ 1]  757 	clr	a
      00034E 1F 11            [ 2]  758 	ldw	(0x11, sp), x
      000350 90 97            [ 1]  759 	ld	yl, a
      000352 72 F9 11         [ 2]  760 	addw	y, (0x11, sp)
      000355 1E 01            [ 2]  761 	ldw	x, (0x01, sp)
      000357 FF               [ 2]  762 	ldw	(x), y
                                    763 ;	../src/main.c: 382: fID = pCfgBuf[2]+(((uint16_t)pCfgBuf[3])<<8);
      000358 1E 03            [ 2]  764 	ldw	x, (0x03, sp)
      00035A E6 02            [ 1]  765 	ld	a, (0x2, x)
      00035C 90 5F            [ 1]  766 	clrw	y
      00035E 90 97            [ 1]  767 	ld	yl, a
      000360 1E 03            [ 2]  768 	ldw	x, (0x03, sp)
      000362 E6 03            [ 1]  769 	ld	a, (0x3, x)
      000364 95               [ 1]  770 	ld	xh, a
      000365 4F               [ 1]  771 	clr	a
      000366 17 11            [ 2]  772 	ldw	(0x11, sp), y
      000368 97               [ 1]  773 	ld	xl, a
      000369 72 FB 11         [ 2]  774 	addw	x, (0x11, sp)
                                    775 ;	../src/main.c: 384: ConvertFileName(fID, pcfg->firstFileName);
      00036C 16 01            [ 2]  776 	ldw	y, (0x01, sp)
      00036E 72 A9 00 02      [ 2]  777 	addw	y, #0x0002
      000372 90 89            [ 2]  778 	pushw	y
      000374 89               [ 2]  779 	pushw	x
      000375 CDr02rAF         [ 4]  780 	call	_ConvertFileName
      000378 5B 04            [ 2]  781 	addw	sp, #4
                                    782 ;	../src/main.c: 385: pcfg->fileNo = pCfgBuf[4]+(((uint16_t)pCfgBuf[5])<<8);
      00037A 16 01            [ 2]  783 	ldw	y, (0x01, sp)
      00037C 72 A9 00 0B      [ 2]  784 	addw	y, #0x000b
      000380 1E 03            [ 2]  785 	ldw	x, (0x03, sp)
      000382 E6 04            [ 1]  786 	ld	a, (0x4, x)
      000384 6B 10            [ 1]  787 	ld	(0x10, sp), a
      000386 0F 0F            [ 1]  788 	clr	(0x0f, sp)
      000388 1E 03            [ 2]  789 	ldw	x, (0x03, sp)
      00038A E6 05            [ 1]  790 	ld	a, (0x5, x)
      00038C 6B 11            [ 1]  791 	ld	(0x11, sp), a
      00038E 0F 12            [ 1]  792 	clr	(0x12, sp)
      000390 1E 0F            [ 2]  793 	ldw	x, (0x0f, sp)
      000392 72 FB 11         [ 2]  794 	addw	x, (0x11, sp)
      000395 90 FF            [ 2]  795 	ldw	(y), x
                                    796 ;	../src/main.c: 386: pcfg->fileSzInBlock = pCfgBuf[6]+ \
      000397 1E 01            [ 2]  797 	ldw	x, (0x01, sp)
      000399 1C 00 07         [ 2]  798 	addw	x, #0x0007
      00039C 1F 05            [ 2]  799 	ldw	(0x05, sp), x
      00039E 1E 03            [ 2]  800 	ldw	x, (0x03, sp)
      0003A0 E6 06            [ 1]  801 	ld	a, (0x6, x)
      0003A2 90 97            [ 1]  802 	ld	yl, a
      0003A4 1E 03            [ 2]  803 	ldw	x, (0x03, sp)
      0003A6 E6 07            [ 1]  804 	ld	a, (0x7, x)
      0003A8 0F 11            [ 1]  805 	clr	(0x11, sp)
      0003AA 5F               [ 1]  806 	clrw	x
      0003AB 95               [ 1]  807 	ld	xh, a
      0003AC 7B 11            [ 1]  808 	ld	a, (0x11, sp)
      0003AE 0F 0A            [ 1]  809 	clr	(0x0a, sp)
      0003B0 0F 11            [ 1]  810 	clr	(0x11, sp)
      0003B2 0F 10            [ 1]  811 	clr	(0x10, sp)
      0003B4 0F 0F            [ 1]  812 	clr	(0x0f, sp)
      0003B6 88               [ 1]  813 	push	a
      0003B7 90 9F            [ 1]  814 	ld	a, yl
      0003B9 1B 0B            [ 1]  815 	add	a, (0x0b, sp)
      0003BB 90 97            [ 1]  816 	ld	yl, a
      0003BD 9E               [ 1]  817 	ld	a, xh
      0003BE 19 12            [ 1]  818 	adc	a, (0x12, sp)
      0003C0 90 95            [ 1]  819 	ld	yh, a
      0003C2 84               [ 1]  820 	pop	a
      0003C3 19 10            [ 1]  821 	adc	a, (0x10, sp)
      0003C5 6B 0C            [ 1]  822 	ld	(0x0c, sp), a
      0003C7 9F               [ 1]  823 	ld	a, xl
      0003C8 19 0F            [ 1]  824 	adc	a, (0x0f, sp)
      0003CA 6B 0B            [ 1]  825 	ld	(0x0b, sp), a
      0003CC 1E 03            [ 2]  826 	ldw	x, (0x03, sp)
      0003CE E6 08            [ 1]  827 	ld	a, (0x8, x)
      0003D0 5F               [ 1]  828 	clrw	x
      0003D1 0F 0F            [ 1]  829 	clr	(0x0f, sp)
      0003D3 0F 12            [ 1]  830 	clr	(0x12, sp)
      0003D5 0F 11            [ 1]  831 	clr	(0x11, sp)
      0003D7 72 F9 11         [ 2]  832 	addw	y, (0x11, sp)
      0003DA 19 0C            [ 1]  833 	adc	a, (0x0c, sp)
      0003DC 6B 08            [ 1]  834 	ld	(0x08, sp), a
      0003DE 9F               [ 1]  835 	ld	a, xl
      0003DF 19 0B            [ 1]  836 	adc	a, (0x0b, sp)
      0003E1 6B 07            [ 1]  837 	ld	(0x07, sp), a
      0003E3 1E 03            [ 2]  838 	ldw	x, (0x03, sp)
      0003E5 E6 09            [ 1]  839 	ld	a, (0x9, x)
      0003E7 0F 0F            [ 1]  840 	clr	(0x0f, sp)
      0003E9 0F 0E            [ 1]  841 	clr	(0x0e, sp)
      0003EB 5F               [ 1]  842 	clrw	x
      0003EC 88               [ 1]  843 	push	a
      0003ED 90 9F            [ 1]  844 	ld	a, yl
      0003EF 1B 0F            [ 1]  845 	add	a, (0x0f, sp)
      0003F1 90 02            [ 1]  846 	rlwa	y
      0003F3 89               [ 2]  847 	pushw	x
      0003F4 19 02            [ 1]  848 	adc	a, (2, sp)
      0003F6 85               [ 2]  849 	popw	x
      0003F7 90 95            [ 1]  850 	ld	yh, a
      0003F9 9E               [ 1]  851 	ld	a, xh
      0003FA 19 09            [ 1]  852 	adc	a, (0x09, sp)
      0003FC 6B 11            [ 1]  853 	ld	(0x11, sp), a
      0003FE 84               [ 1]  854 	pop	a
      0003FF 19 07            [ 1]  855 	adc	a, (0x07, sp)
      000401 6B 0F            [ 1]  856 	ld	(0x0f, sp), a
      000403 1E 05            [ 2]  857 	ldw	x, (0x05, sp)
      000405 EF 02            [ 2]  858 	ldw	(0x2, x), y
      000407 16 0F            [ 2]  859 	ldw	y, (0x0f, sp)
      000409 FF               [ 2]  860 	ldw	(x), y
                                    861 ;	../src/main.c: 390: pcfg->channel = pCfgBuf[10];
      00040A 1E 01            [ 2]  862 	ldw	x, (0x01, sp)
      00040C 1C 00 0D         [ 2]  863 	addw	x, #0x000d
      00040F 16 03            [ 2]  864 	ldw	y, (0x03, sp)
      000411 90 E6 0A         [ 1]  865 	ld	a, (0xa, y)
      000414 F7               [ 1]  866 	ld	(x), a
                                    867 ;	../src/main.c: 391: if(pCfgBuf[11] == 0)
      000415 1E 03            [ 2]  868 	ldw	x, (0x03, sp)
      000417 E6 0B            [ 1]  869 	ld	a, (0xb, x)
                                    870 ;	../src/main.c: 393: pcfg->isFullResultion = false;
      000419 1E 01            [ 2]  871 	ldw	x, (0x01, sp)
      00041B 1C 00 0E         [ 2]  872 	addw	x, #0x000e
                                    873 ;	../src/main.c: 391: if(pCfgBuf[11] == 0)
      00041E 4D               [ 1]  874 	tnz	a
      00041F 26 03            [ 1]  875 	jrne	00104$
                                    876 ;	../src/main.c: 393: pcfg->isFullResultion = false;
      000421 7F               [ 1]  877 	clr	(x)
      000422 20 03            [ 2]  878 	jra	00105$
      000424                        879 00104$:
                                    880 ;	../src/main.c: 395: pcfg->isFullResultion = true;
      000424 A6 01            [ 1]  881 	ld	a, #0x01
      000426 F7               [ 1]  882 	ld	(x), a
      000427                        883 00105$:
                                    884 ;	../src/main.c: 398: return 0x0;
      000427 5F               [ 1]  885 	clrw	x
      000428                        886 00106$:
                                    887 ;	../src/main.c: 399: }
      000428 5B 12            [ 2]  888 	addw	sp, #18
      00042A 81               [ 4]  889 	ret
                                    890 ;	../src/main.c: 413: static uint8_t IsValidCfgBuf(uint8_t *pCfgBuf){
                                    891 ;	-----------------------------------------
                                    892 ;	 function IsValidCfgBuf
                                    893 ;	-----------------------------------------
      00042B                        894 _IsValidCfgBuf:
      00042B 88               [ 1]  895 	push	a
                                    896 ;	../src/main.c: 414: uint8_t crc = 0;
      00042C 0F 01            [ 1]  897 	clr	(0x01, sp)
                                    898 ;	../src/main.c: 422: return false;	
      00042E 5F               [ 1]  899 	clrw	x
      00042F                        900 00105$:
                                    901 ;	../src/main.c: 416: for(; i < CFG_BUF_SZ - 1; i++){
      00042F A3 00 0C         [ 2]  902 	cpw	x, #0x000c
      000432 2E 0E            [ 1]  903 	jrsge	00101$
                                    904 ;	../src/main.c: 417: crc += pCfgBuf[i];		
      000434 90 93            [ 1]  905 	ldw	y, x
      000436 72 F9 04         [ 2]  906 	addw	y, (0x04, sp)
      000439 90 F6            [ 1]  907 	ld	a, (y)
      00043B 1B 01            [ 1]  908 	add	a, (0x01, sp)
      00043D 6B 01            [ 1]  909 	ld	(0x01, sp), a
                                    910 ;	../src/main.c: 416: for(; i < CFG_BUF_SZ - 1; i++){
      00043F 5C               [ 1]  911 	incw	x
      000440 20 ED            [ 2]  912 	jra	00105$
      000442                        913 00101$:
                                    914 ;	../src/main.c: 419: if(crc == pCfgBuf[CFG_BUF_SZ-1])
      000442 1E 04            [ 2]  915 	ldw	x, (0x04, sp)
      000444 E6 0C            [ 1]  916 	ld	a, (0xc, x)
                                    917 ;	../src/main.c: 420: return true;
      000446 10 01            [ 1]  918 	sub	a, (0x01, sp)
      000448 26 02            [ 1]  919 	jrne	00103$
      00044A 4C               [ 1]  920 	inc	a
                                    921 ;	../src/main.c: 422: return false;	
      00044B 21                     922 	.byte 0x21
      00044C                        923 00103$:
      00044C 4F               [ 1]  924 	clr	a
      00044D                        925 00107$:
                                    926 ;	../src/main.c: 423: }
      00044D 5B 01            [ 2]  927 	addw	sp, #1
      00044F 81               [ 4]  928 	ret
                                    929 ;	../src/main.c: 432: static void clkInit( void )
                                    930 ;	-----------------------------------------
                                    931 ;	 function clkInit
                                    932 ;	-----------------------------------------
      000450                        933 _clkInit:
                                    934 ;	../src/main.c: 435: CLK->CKDIVR = 0;//(CLK_PRESCALER_HSIDIV1|CLK_PRESCALER_CPUDIV1);
      000450 35 00 50 C6      [ 1]  935 	mov	0x50c6+0, #0x00
                                    936 ;	../src/main.c: 443: CLK->PCKENR1 |= (CLK_PCKENR1_TIM4|CLK_PCKENR1_SPI|CLK_PCKENR1_UART1);
      000454 C6 50 C7         [ 1]  937 	ld	a, 0x50c7
      000457 AA 16            [ 1]  938 	or	a, #0x16
      000459 C7 50 C7         [ 1]  939 	ld	0x50c7, a
                                    940 ;	../src/main.c: 444: CLK->PCKENR2 |= (CLK_PCKENR2_ADC);
      00045C 72 16 50 CA      [ 1]  941 	bset	20682, #3
                                    942 ;	../src/main.c: 445: }
      000460 81               [ 4]  943 	ret
                                    944 ;	../src/main.c: 460: void assert_failed(uint8_t* file, uint32_t line)
                                    945 ;	-----------------------------------------
                                    946 ;	 function assert_failed
                                    947 ;	-----------------------------------------
      000461                        948 _assert_failed:
                                    949 ;	../src/main.c: 466: while (1)
      000461                        950 00102$:
      000461 20 FE            [ 2]  951 	jra	00102$
                                    952 ;	../src/main.c: 469: }
      000463 81               [ 4]  953 	ret
                                    954 	.area CODE
                                    955 	.area CONST
                                    956 	.area CONST
      000000                        957 ___str_0:
      000000 43 46 47               958 	.ascii "CFG"
      000003 00                     959 	.db 0x00
                                    960 	.area CODE
                                    961 	.area INITIALIZER
      000000                        962 __xinit__blkCnt:
      000000 00                     963 	.db #0x00	; 0
      000001                        964 __xinit__fileBlkCnt:
      000001 00 00 00 00            965 	.byte #0x00, #0x00, #0x00, #0x00	; 0
      000005                        966 __xinit__fileNoCnt:
      000005 00 00                  967 	.dw #0x0000
                                    968 	.area CABS (ABS)
