                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _SetLedMode
                                     13 	.globl _LedMatrixInit
                                     14 	.globl _pf_write
                                     15 	.globl _dly
                                     16 	.globl _sysTickInit
                                     17 	.globl _loggerCfg
                                     18 	.globl _assert_failed
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area DATA
      000000                         23 _cfg:
      000000                         24 	.ds 13
      00000D                         25 _loggerCfg::
      00000D                         26 	.ds 15
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area INITIALIZED
      000000                         31 _blkCnt:
      000000                         32 	.ds 1
      000001                         33 _fileBlkCnt:
      000001                         34 	.ds 4
      000005                         35 _fileNoCnt:
      000005                         36 	.ds 2
                                     37 ;--------------------------------------------------------
                                     38 ; Stack segment in internal ram 
                                     39 ;--------------------------------------------------------
                                     40 	.area	SSEG
      000000                         41 __start__stack:
      000000                         42 	.ds	1
                                     43 
                                     44 ;--------------------------------------------------------
                                     45 ; absolute external ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DABS (ABS)
                                     48 
                                     49 ; default segment ordering for linker
                                     50 	.area HOME
                                     51 	.area GSINIT
                                     52 	.area GSFINAL
                                     53 	.area CONST
                                     54 	.area INITIALIZER
                                     55 	.area CODE
                                     56 
                                     57 ;--------------------------------------------------------
                                     58 ; interrupt vector 
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
      000000                         61 __interrupt_vect:
      000000 82v00u00u00             62 	int s_GSINIT ; reset
      000004 82v00u00u00             63 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             64 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             65 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             66 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             67 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             68 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             69 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             70 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00             71 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00             72 	int 0x000000 ; int8
      00002C 82 00 00 00             73 	int 0x000000 ; int9
      000030 82v00u00u00             74 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00             75 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00             76 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00             77 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00             78 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82 00 00 00             79 	int 0x000000 ; int15
      000048 82 00 00 00             80 	int 0x000000 ; int16
      00004C 82v00u00u00             81 	int _UART1_TX_IRQHandler ; int17
      000050 82v00u00u00             82 	int _UART1_RX_IRQHandler ; int18
      000054 82v00u00u00             83 	int _I2C_IRQHandler ; int19
      000058 82 00 00 00             84 	int 0x000000 ; int20
      00005C 82 00 00 00             85 	int 0x000000 ; int21
      000060 82v00u00u00             86 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00             87 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00             88 	int _EEPROM_EEC_IRQHandler ; int24
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME
                                     93 	.area GSINIT
                                     94 	.area GSFINAL
                                     95 	.area GSINIT
      000000                         96 __sdcc_init_data:
                                     97 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   98 	ldw x, #l_DATA
      000003 27 07            [ 1]   99 	jreq	00002$
      000005                        100 00001$:
      000005 72 4FuFFuFF      [ 1]  101 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  102 	decw x
      00000A 26 F9            [ 1]  103 	jrne	00001$
      00000C                        104 00002$:
      00000C AEr00r00         [ 2]  105 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  106 	jreq	00004$
      000011                        107 00003$:
      000011 D6uFFuFF         [ 1]  108 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  109 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  110 	decw	x
      000018 26 F7            [ 1]  111 	jrne	00003$
      00001A                        112 00004$:
                                    113 ; stm8_genXINIT() end
                                    114 	.area GSFINAL
      000000 CCr00r6C         [ 2]  115 	jp	__sdcc_program_startup
                                    116 ;--------------------------------------------------------
                                    117 ; Home
                                    118 ;--------------------------------------------------------
                                    119 	.area HOME
                                    120 	.area HOME
      00006C                        121 __sdcc_program_startup:
      00006C CCr00r00         [ 2]  122 	jp	_main
                                    123 ;	return from main will return to caller
                                    124 ;--------------------------------------------------------
                                    125 ; code
                                    126 ;--------------------------------------------------------
                                    127 	.area CODE
                                    128 ;	../src/main.c: 100: void main( void )
                                    129 ;	-----------------------------------------
                                    130 ;	 function main
                                    131 ;	-----------------------------------------
      000000                        132 _main:
      000000 52 2F            [ 2]  133 	sub	sp, #47
                                    134 ;	../src/main.c: 110: clkInit();
      000002 CDr03r60         [ 4]  135 	call	_clkInit
                                    136 ;	../src/main.c: 111: LedMatrixInit();
      000005 CDr00r00         [ 4]  137 	call	_LedMatrixInit
                                    138 ;	../src/main.c: 112: sysTickInit();
      000008 CDr00r00         [ 4]  139 	call	_sysTickInit
                                    140 ;	../src/main.c: 115: enableInterrupts();
      00000B 9A               [ 1]  141 	rim
                                    142 ;	../src/main.c: 126: for(i = 0; i < NUM_OF_LEDS; i++){
      00000C 0F 2F            [ 1]  143 	clr	(0x2f, sp)
      00000E                        144 00141$:
                                    145 ;	../src/main.c: 127: SetLedMode(i, LED_ON);
      00000E 4B 03            [ 1]  146 	push	#0x03
      000010 7B 30            [ 1]  147 	ld	a, (0x30, sp)
      000012 88               [ 1]  148 	push	a
      000013 CDr00r00         [ 4]  149 	call	_SetLedMode
      000016 85               [ 2]  150 	popw	x
                                    151 ;	../src/main.c: 128: dly(1000);
      000017 4B E8            [ 1]  152 	push	#0xe8
      000019 4B 03            [ 1]  153 	push	#0x03
      00001B 5F               [ 1]  154 	clrw	x
      00001C 89               [ 2]  155 	pushw	x
      00001D CDr00r00         [ 4]  156 	call	_dly
      000020 5B 04            [ 2]  157 	addw	sp, #4
                                    158 ;	../src/main.c: 129: SetLedMode(i, LED_OFF);
      000022 4B 00            [ 1]  159 	push	#0x00
      000024 7B 30            [ 1]  160 	ld	a, (0x30, sp)
      000026 88               [ 1]  161 	push	a
      000027 CDr00r00         [ 4]  162 	call	_SetLedMode
      00002A 85               [ 2]  163 	popw	x
                                    164 ;	../src/main.c: 130: SetLedMode(i+1, LED_ON);
      00002B 7B 2F            [ 1]  165 	ld	a, (0x2f, sp)
      00002D 4C               [ 1]  166 	inc	a
      00002E 4B 03            [ 1]  167 	push	#0x03
      000030 88               [ 1]  168 	push	a
      000031 CDr00r00         [ 4]  169 	call	_SetLedMode
      000034 85               [ 2]  170 	popw	x
                                    171 ;	../src/main.c: 126: for(i = 0; i < NUM_OF_LEDS; i++){
      000035 0C 2F            [ 1]  172 	inc	(0x2f, sp)
      000037 7B 2F            [ 1]  173 	ld	a, (0x2f, sp)
      000039 A1 0C            [ 1]  174 	cp	a, #0x0c
      00003B 25 D1            [ 1]  175 	jrc	00141$
                                    176 ;	../src/main.c: 133: for(i = 0; i < NUM_OF_LEDS; i++){
      00003D 0F 2F            [ 1]  177 	clr	(0x2f, sp)
      00003F                        178 00143$:
                                    179 ;	../src/main.c: 134: SetLedMode(i, (i%2)?LED_TOGGLE_FAST:LED_TOGGLE_SLOW);
      00003F 7B 2F            [ 1]  180 	ld	a, (0x2f, sp)
      000041 44               [ 1]  181 	srl	a
      000042 24 03            [ 1]  182 	jrnc	00147$
      000044 A6 02            [ 1]  183 	ld	a, #0x02
      000046 C5                     184 	.byte 0xc5
      000047                        185 00147$:
      000047 A6 01            [ 1]  186 	ld	a, #0x01
      000049                        187 00148$:
      000049 88               [ 1]  188 	push	a
      00004A 7B 30            [ 1]  189 	ld	a, (0x30, sp)
      00004C 88               [ 1]  190 	push	a
      00004D CDr00r00         [ 4]  191 	call	_SetLedMode
      000050 85               [ 2]  192 	popw	x
                                    193 ;	../src/main.c: 135: dly(10000);
      000051 4B 10            [ 1]  194 	push	#0x10
      000053 4B 27            [ 1]  195 	push	#0x27
      000055 5F               [ 1]  196 	clrw	x
      000056 89               [ 2]  197 	pushw	x
      000057 CDr00r00         [ 4]  198 	call	_dly
      00005A 5B 04            [ 2]  199 	addw	sp, #4
                                    200 ;	../src/main.c: 133: for(i = 0; i < NUM_OF_LEDS; i++){
      00005C 0C 2F            [ 1]  201 	inc	(0x2f, sp)
      00005E 7B 2F            [ 1]  202 	ld	a, (0x2f, sp)
      000060 A1 0C            [ 1]  203 	cp	a, #0x0c
      000062 25 DB            [ 1]  204 	jrc	00143$
                                    205 ;	../src/main.c: 138: while(1);
      000064                        206 00104$:
      000064 20 FE            [ 2]  207 	jra	00104$
                                    208 ;	../src/main.c: 239: }
                                    209 ;	../src/main.c: 241: }
      000066 5B 2F            [ 2]  210 	addw	sp, #47
      000068 81               [ 4]  211 	ret
                                    212 ;	../src/main.c: 254: static void Wr2SD( fsm_t * pfsm ){
                                    213 ;	-----------------------------------------
                                    214 ;	 function Wr2SD
                                    215 ;	-----------------------------------------
      000069                        216 _Wr2SD:
      000069 52 06            [ 2]  217 	sub	sp, #6
                                    218 ;	../src/main.c: 261: if( S1_WR_BUF0 == pfsm->state){
      00006B 16 09            [ 2]  219 	ldw	y, (0x09, sp)
      00006D 17 03            [ 2]  220 	ldw	(0x03, sp), y
      00006F 93               [ 1]  221 	ldw	x, y
      000070 F6               [ 1]  222 	ld	a, (x)
      000071 4A               [ 1]  223 	dec	a
      000072 26 06            [ 1]  224 	jrne	00102$
                                    225 ;	../src/main.c: 262: pBuf = adcBuffer0; bufNo = 0;
      000074 AEr00r00         [ 2]  226 	ldw	x, #_adcBuffer0+0
      000077 4F               [ 1]  227 	clr	a
      000078 20 05            [ 2]  228 	jra	00103$
      00007A                        229 00102$:
                                    230 ;	../src/main.c: 264: pBuf = adcBuffer1; bufNo = 1;
      00007A AEr00r00         [ 2]  231 	ldw	x, #(_adcBuffer1+0)
      00007D A6 01            [ 1]  232 	ld	a, #0x01
      00007F                        233 00103$:
                                    234 ;	../src/main.c: 266: RELEASE_BUFF_FOR_WR(bufNo); //clear this flag
      00007F 6B 06            [ 1]  235 	ld	(0x06, sp), a
      000081 A6 01            [ 1]  236 	ld	a, #0x01
      000083 88               [ 1]  237 	push	a
      000084 7B 07            [ 1]  238 	ld	a, (0x07, sp)
      000086 27 05            [ 1]  239 	jreq	00143$
      000088                        240 00142$:
      000088 08 01            [ 1]  241 	sll	(1, sp)
      00008A 4A               [ 1]  242 	dec	a
      00008B 26 FB            [ 1]  243 	jrne	00142$
      00008D                        244 00143$:
      00008D 84               [ 1]  245 	pop	a
      00008E 43               [ 1]  246 	cpl	a
      00008F C4u00u00         [ 1]  247 	and	a, _buffer_rdy+0
      000092 C7u00u00         [ 1]  248 	ld	_buffer_rdy+0, a
                                    249 ;	../src/main.c: 269: SetLedMode(0, LED_ON);
      000095 89               [ 2]  250 	pushw	x
      000096 4B 03            [ 1]  251 	push	#0x03
      000098 4B 00            [ 1]  252 	push	#0x00
      00009A CDr00r00         [ 4]  253 	call	_SetLedMode
      00009D 85               [ 2]  254 	popw	x
      00009E 85               [ 2]  255 	popw	x
                                    256 ;	../src/main.c: 270: res = pf_write((void*)pBuf,BUFFER_SZ_IN_BYTES, &pbr);
      00009F 51               [ 1]  257 	exgw	x, y
      0000A0 96               [ 1]  258 	ldw	x, sp
      0000A1 5C               [ 1]  259 	incw	x
      0000A2 89               [ 2]  260 	pushw	x
      0000A3 4B 00            [ 1]  261 	push	#0x00
      0000A5 4B 01            [ 1]  262 	push	#0x01
      0000A7 90 89            [ 2]  263 	pushw	y
      0000A9 CDr00r00         [ 4]  264 	call	_pf_write
      0000AC 5B 06            [ 2]  265 	addw	sp, #6
                                    266 ;	../src/main.c: 272: SetLedMode(0, LED_OFF);
      0000AE 88               [ 1]  267 	push	a
      0000AF 4B 00            [ 1]  268 	push	#0x00
      0000B1 4B 00            [ 1]  269 	push	#0x00
      0000B3 CDr00r00         [ 4]  270 	call	_SetLedMode
      0000B6 85               [ 2]  271 	popw	x
      0000B7 84               [ 1]  272 	pop	a
                                    273 ;	../src/main.c: 277: pfsm->error = ERR_WR_DATA;
      0000B8 1E 03            [ 2]  274 	ldw	x, (0x03, sp)
      0000BA 5C               [ 1]  275 	incw	x
      0000BB 1F 05            [ 2]  276 	ldw	(0x05, sp), x
                                    277 ;	../src/main.c: 274: if(FR_OK != res){
      0000BD 4D               [ 1]  278 	tnz	a
      0000BE 27 0C            [ 1]  279 	jreq	00105$
                                    280 ;	../src/main.c: 277: pfsm->error = ERR_WR_DATA;
      0000C0 1E 05            [ 2]  281 	ldw	x, (0x05, sp)
      0000C2 A6 02            [ 1]  282 	ld	a, #0x02
      0000C4 F7               [ 1]  283 	ld	(x), a
                                    284 ;	../src/main.c: 278: pfsm->state = S4_ERR;
      0000C5 1E 03            [ 2]  285 	ldw	x, (0x03, sp)
      0000C7 A6 04            [ 1]  286 	ld	a, #0x04
      0000C9 F7               [ 1]  287 	ld	(x), a
                                    288 ;	../src/main.c: 279: return;
      0000CA 20 53            [ 2]  289 	jra	00112$
      0000CC                        290 00105$:
                                    291 ;	../src/main.c: 282: if(NO_BUFF_PER_BLK == ++blkCnt){
      0000CC 72 5Cu00u00      [ 1]  292 	inc	_blkCnt+0
      0000D0 C6u00u00         [ 1]  293 	ld	a, _blkCnt+0
      0000D3 A1 02            [ 1]  294 	cp	a, #0x02
      0000D5 26 45            [ 1]  295 	jrne	00111$
                                    296 ;	../src/main.c: 284: blkCnt = 0;
      0000D7 72 5Fu00u00      [ 1]  297 	clr	_blkCnt+0
                                    298 ;	../src/main.c: 285: res = pf_write(0,0,&pbr);
      0000DB 96               [ 1]  299 	ldw	x, sp
      0000DC 5C               [ 1]  300 	incw	x
      0000DD 89               [ 2]  301 	pushw	x
      0000DE 5F               [ 1]  302 	clrw	x
      0000DF 89               [ 2]  303 	pushw	x
      0000E0 5F               [ 1]  304 	clrw	x
      0000E1 89               [ 2]  305 	pushw	x
      0000E2 CDr00r00         [ 4]  306 	call	_pf_write
      0000E5 5B 06            [ 2]  307 	addw	sp, #6
                                    308 ;	../src/main.c: 288: if(FR_OK != res){
      0000E7 4D               [ 1]  309 	tnz	a
      0000E8 27 0C            [ 1]  310 	jreq	00107$
                                    311 ;	../src/main.c: 290: pfsm->error = ERR_WR_NO_RESP;
      0000EA 1E 05            [ 2]  312 	ldw	x, (0x05, sp)
      0000EC A6 03            [ 1]  313 	ld	a, #0x03
      0000EE F7               [ 1]  314 	ld	(x), a
                                    315 ;	../src/main.c: 291: pfsm->state = S4_ERR;
      0000EF 1E 03            [ 2]  316 	ldw	x, (0x03, sp)
      0000F1 A6 04            [ 1]  317 	ld	a, #0x04
      0000F3 F7               [ 1]  318 	ld	(x), a
                                    319 ;	../src/main.c: 292: return;
      0000F4 20 29            [ 2]  320 	jra	00112$
      0000F6                        321 00107$:
                                    322 ;	../src/main.c: 295: if(0 == --fileBlkCnt){
      0000F6 CEu00u03         [ 2]  323 	ldw	x, _fileBlkCnt+2
      0000F9 1D 00 01         [ 2]  324 	subw	x, #0x0001
      0000FC 90 CEu00u01      [ 2]  325 	ldw	y, _fileBlkCnt+0
      000100 24 02            [ 1]  326 	jrnc	00149$
      000102 90 5A            [ 2]  327 	decw	y
      000104                        328 00149$:
      000104 CFu00u03         [ 2]  329 	ldw	_fileBlkCnt+2, x
      000107 90 CFu00u01      [ 2]  330 	ldw	_fileBlkCnt+0, y
      00010B CEu00u03         [ 2]  331 	ldw	x, _fileBlkCnt+2
      00010E 26 0C            [ 1]  332 	jrne	00111$
      000110 CEu00u01         [ 2]  333 	ldw	x, _fileBlkCnt+0
      000113 26 07            [ 1]  334 	jrne	00111$
                                    335 ;	../src/main.c: 298: pfsm->state = S3_NXT_FILE;
      000115 1E 03            [ 2]  336 	ldw	x, (0x03, sp)
      000117 A6 03            [ 1]  337 	ld	a, #0x03
      000119 F7               [ 1]  338 	ld	(x), a
                                    339 ;	../src/main.c: 299: return;
      00011A 20 03            [ 2]  340 	jra	00112$
      00011C                        341 00111$:
                                    342 ;	../src/main.c: 304: pfsm->state = S0_RST; 
      00011C 1E 03            [ 2]  343 	ldw	x, (0x03, sp)
      00011E 7F               [ 1]  344 	clr	(x)
      00011F                        345 00112$:
                                    346 ;	../src/main.c: 305: }
      00011F 5B 06            [ 2]  347 	addw	sp, #6
      000121 81               [ 4]  348 	ret
                                    349 ;	../src/main.c: 318: static void GetNxtFileName( char * fname){
                                    350 ;	-----------------------------------------
                                    351 ;	 function GetNxtFileName
                                    352 ;	-----------------------------------------
      000122                        353 _GetNxtFileName:
      000122 52 05            [ 2]  354 	sub	sp, #5
                                    355 ;	../src/main.c: 319: uint8_t val = 0;
      000124 0F 01            [ 1]  356 	clr	(0x01, sp)
                                    357 ;	../src/main.c: 321: if(0x39 == fname[3]){
      000126 1E 08            [ 2]  358 	ldw	x, (0x08, sp)
      000128 E6 03            [ 1]  359 	ld	a, (0x3, x)
                                    360 ;	../src/main.c: 322: val = 0x01;
      00012A A0 39            [ 1]  361 	sub	a, #0x39
      00012C 26 03            [ 1]  362 	jrne	00102$
      00012E 4C               [ 1]  363 	inc	a
      00012F 6B 01            [ 1]  364 	ld	(0x01, sp), a
      000131                        365 00102$:
                                    366 ;	../src/main.c: 324: if(0x39 == fname[2]) {
      000131 1E 08            [ 2]  367 	ldw	x, (0x08, sp)
      000133 E6 02            [ 1]  368 	ld	a, (0x2, x)
      000135 A1 39            [ 1]  369 	cp	a, #0x39
      000137 26 06            [ 1]  370 	jrne	00104$
                                    371 ;	../src/main.c: 325: val += 0x02;
      000139 7B 01            [ 1]  372 	ld	a, (0x01, sp)
      00013B AB 02            [ 1]  373 	add	a, #0x02
      00013D 6B 01            [ 1]  374 	ld	(0x01, sp), a
      00013F                        375 00104$:
                                    376 ;	../src/main.c: 327: if(0x39 == fname[1]) {
      00013F 1E 08            [ 2]  377 	ldw	x, (0x08, sp)
      000141 E6 01            [ 1]  378 	ld	a, (0x1, x)
      000143 A1 39            [ 1]  379 	cp	a, #0x39
      000145 26 06            [ 1]  380 	jrne	00106$
                                    381 ;	../src/main.c: 328: val += 0x04;
      000147 7B 01            [ 1]  382 	ld	a, (0x01, sp)
      000149 AB 04            [ 1]  383 	add	a, #0x04
      00014B 6B 01            [ 1]  384 	ld	(0x01, sp), a
      00014D                        385 00106$:
                                    386 ;	../src/main.c: 330: if(0x39 == fname[0]) {
      00014D 16 08            [ 2]  387 	ldw	y, (0x08, sp)
      00014F 17 02            [ 2]  388 	ldw	(0x02, sp), y
      000151 93               [ 1]  389 	ldw	x, y
      000152 F6               [ 1]  390 	ld	a, (x)
      000153 A1 39            [ 1]  391 	cp	a, #0x39
      000155 26 06            [ 1]  392 	jrne	00108$
                                    393 ;	../src/main.c: 331: val += 0x08;
      000157 7B 01            [ 1]  394 	ld	a, (0x01, sp)
      000159 AB 08            [ 1]  395 	add	a, #0x08
      00015B 6B 01            [ 1]  396 	ld	(0x01, sp), a
      00015D                        397 00108$:
                                    398 ;	../src/main.c: 335: case 0x01: fname[3] = 0x30; 
      00015D 1E 02            [ 2]  399 	ldw	x, (0x02, sp)
      00015F 1C 00 03         [ 2]  400 	addw	x, #0x0003
                                    401 ;	../src/main.c: 336: fname[2]++;break;
      000162 16 02            [ 2]  402 	ldw	y, (0x02, sp)
      000164 90 5C            [ 1]  403 	incw	y
      000166 90 5C            [ 1]  404 	incw	y
      000168 17 04            [ 2]  405 	ldw	(0x04, sp), y
                                    406 ;	../src/main.c: 334: switch(val){
      00016A 7B 01            [ 1]  407 	ld	a, (0x01, sp)
      00016C 4A               [ 1]  408 	dec	a
      00016D 27 18            [ 1]  409 	jreq	00109$
                                    410 ;	../src/main.c: 339: fname[1]++; break;
      00016F 16 02            [ 2]  411 	ldw	y, (0x02, sp)
      000171 90 5C            [ 1]  412 	incw	y
                                    413 ;	../src/main.c: 334: switch(val){
      000173 7B 01            [ 1]  414 	ld	a, (0x01, sp)
      000175 A1 03            [ 1]  415 	cp	a, #0x03
      000177 27 16            [ 1]  416 	jreq	00110$
      000179 7B 01            [ 1]  417 	ld	a, (0x01, sp)
      00017B A1 07            [ 1]  418 	cp	a, #0x07
      00017D 27 1C            [ 1]  419 	jreq	00111$
      00017F 7B 01            [ 1]  420 	ld	a, (0x01, sp)
      000181 A1 0F            [ 1]  421 	cp	a, #0x0f
      000183 27 25            [ 1]  422 	jreq	00112$
      000185 20 34            [ 2]  423 	jra	00113$
                                    424 ;	../src/main.c: 335: case 0x01: fname[3] = 0x30; 
      000187                        425 00109$:
      000187 A6 30            [ 1]  426 	ld	a, #0x30
      000189 F7               [ 1]  427 	ld	(x), a
                                    428 ;	../src/main.c: 336: fname[2]++;break;
      00018A 1E 04            [ 2]  429 	ldw	x, (0x04, sp)
      00018C 7C               [ 1]  430 	inc	(x)
      00018D 20 2D            [ 2]  431 	jra	00115$
                                    432 ;	../src/main.c: 337: case 0x03: fname[3] = 0x30; 
      00018F                        433 00110$:
      00018F A6 30            [ 1]  434 	ld	a, #0x30
      000191 F7               [ 1]  435 	ld	(x), a
                                    436 ;	../src/main.c: 338: fname[2] = 0x30; 
      000192 1E 04            [ 2]  437 	ldw	x, (0x04, sp)
      000194 A6 30            [ 1]  438 	ld	a, #0x30
      000196 F7               [ 1]  439 	ld	(x), a
                                    440 ;	../src/main.c: 339: fname[1]++; break;
      000197 90 7C            [ 1]  441 	inc	(y)
      000199 20 21            [ 2]  442 	jra	00115$
                                    443 ;	../src/main.c: 340: case 0x07: fname[3] = 0x30; 
      00019B                        444 00111$:
      00019B A6 30            [ 1]  445 	ld	a, #0x30
      00019D F7               [ 1]  446 	ld	(x), a
                                    447 ;	../src/main.c: 341: fname[2] = 0x30; 
      00019E 1E 04            [ 2]  448 	ldw	x, (0x04, sp)
                                    449 ;	../src/main.c: 342: fname[1] = 0x30; 
      0001A0 A6 30            [ 1]  450 	ld	a, #0x30
      0001A2 F7               [ 1]  451 	ld	(x), a
      0001A3 90 F7            [ 1]  452 	ld	(y), a
                                    453 ;	../src/main.c: 343: fname[0]++; break;
      0001A5 1E 02            [ 2]  454 	ldw	x, (0x02, sp)
      0001A7 7C               [ 1]  455 	inc	(x)
      0001A8 20 12            [ 2]  456 	jra	00115$
                                    457 ;	../src/main.c: 344: case 0x0f: fname[3] = 0x30; 
      0001AA                        458 00112$:
      0001AA A6 30            [ 1]  459 	ld	a, #0x30
      0001AC F7               [ 1]  460 	ld	(x), a
                                    461 ;	../src/main.c: 345: fname[2] = 0x30; 
      0001AD 1E 04            [ 2]  462 	ldw	x, (0x04, sp)
                                    463 ;	../src/main.c: 346: fname[1] = 0x30; 
      0001AF A6 30            [ 1]  464 	ld	a, #0x30
      0001B1 F7               [ 1]  465 	ld	(x), a
      0001B2 90 F7            [ 1]  466 	ld	(y), a
                                    467 ;	../src/main.c: 347: fname[0] = 0x30; break;
      0001B4 1E 02            [ 2]  468 	ldw	x, (0x02, sp)
      0001B6 A6 30            [ 1]  469 	ld	a, #0x30
      0001B8 F7               [ 1]  470 	ld	(x), a
      0001B9 20 01            [ 2]  471 	jra	00115$
                                    472 ;	../src/main.c: 348: default: fname[3]++; break;
      0001BB                        473 00113$:
      0001BB 7C               [ 1]  474 	inc	(x)
                                    475 ;	../src/main.c: 349: }
      0001BC                        476 00115$:
                                    477 ;	../src/main.c: 350: }
      0001BC 5B 05            [ 2]  478 	addw	sp, #5
      0001BE 81               [ 4]  479 	ret
                                    480 ;	../src/main.c: 363: static void ConvertFileName(uint16_t firstFileName, char * fname){
                                    481 ;	-----------------------------------------
                                    482 ;	 function ConvertFileName
                                    483 ;	-----------------------------------------
      0001BF                        484 _ConvertFileName:
      0001BF 52 04            [ 2]  485 	sub	sp, #4
                                    486 ;	../src/main.c: 366: val = firstFileName/1000;
      0001C1 16 07            [ 2]  487 	ldw	y, (0x07, sp)
      0001C3 17 03            [ 2]  488 	ldw	(0x03, sp), y
      0001C5 93               [ 1]  489 	ldw	x, y
      0001C6 90 AE 03 E8      [ 2]  490 	ldw	y, #0x03e8
      0001CA 65               [ 2]  491 	divw	x, y
                                    492 ;	../src/main.c: 367: fname[0] = val + 0x30;
      0001CB 16 09            [ 2]  493 	ldw	y, (0x09, sp)
      0001CD 17 01            [ 2]  494 	ldw	(0x01, sp), y
      0001CF 9F               [ 1]  495 	ld	a, xl
      0001D0 AB 30            [ 1]  496 	add	a, #0x30
      0001D2 16 01            [ 2]  497 	ldw	y, (0x01, sp)
      0001D4 90 F7            [ 1]  498 	ld	(y), a
                                    499 ;	../src/main.c: 368: firstFileName -=  val*1000;
      0001D6 89               [ 2]  500 	pushw	x
      0001D7 4B E8            [ 1]  501 	push	#0xe8
      0001D9 4B 03            [ 1]  502 	push	#0x03
      0001DB CDr00r00         [ 4]  503 	call	__mulint
      0001DE 5B 04            [ 2]  504 	addw	sp, #4
      0001E0 50               [ 2]  505 	negw	x
      0001E1 72 FB 03         [ 2]  506 	addw	x, (0x03, sp)
                                    507 ;	../src/main.c: 369: val = firstFileName/100;
      0001E4 1F 07            [ 2]  508 	ldw	(0x07, sp), x
      0001E6 1F 03            [ 2]  509 	ldw	(0x03, sp), x
      0001E8 90 AE 00 64      [ 2]  510 	ldw	y, #0x0064
      0001EC 65               [ 2]  511 	divw	x, y
                                    512 ;	../src/main.c: 370: fname[1] = val + 0x30;
      0001ED 16 01            [ 2]  513 	ldw	y, (0x01, sp)
      0001EF 90 5C            [ 1]  514 	incw	y
      0001F1 9F               [ 1]  515 	ld	a, xl
      0001F2 AB 30            [ 1]  516 	add	a, #0x30
      0001F4 90 F7            [ 1]  517 	ld	(y), a
                                    518 ;	../src/main.c: 371: firstFileName -=  val*100;
      0001F6 89               [ 2]  519 	pushw	x
      0001F7 4B 64            [ 1]  520 	push	#0x64
      0001F9 4B 00            [ 1]  521 	push	#0x00
      0001FB CDr00r00         [ 4]  522 	call	__mulint
      0001FE 5B 04            [ 2]  523 	addw	sp, #4
      000200 50               [ 2]  524 	negw	x
      000201 72 FB 03         [ 2]  525 	addw	x, (0x03, sp)
                                    526 ;	../src/main.c: 372: val = firstFileName/10;
      000204 1F 07            [ 2]  527 	ldw	(0x07, sp), x
      000206 1F 03            [ 2]  528 	ldw	(0x03, sp), x
      000208 90 AE 00 0A      [ 2]  529 	ldw	y, #0x000a
      00020C 65               [ 2]  530 	divw	x, y
                                    531 ;	../src/main.c: 373: fname[2] = val + 0x30;
      00020D 16 01            [ 2]  532 	ldw	y, (0x01, sp)
      00020F 72 A9 00 02      [ 2]  533 	addw	y, #0x0002
      000213 9F               [ 1]  534 	ld	a, xl
      000214 AB 30            [ 1]  535 	add	a, #0x30
      000216 90 F7            [ 1]  536 	ld	(y), a
                                    537 ;	../src/main.c: 374: firstFileName -=  val*10;
      000218 89               [ 2]  538 	pushw	x
      000219 58               [ 2]  539 	sllw	x
      00021A 58               [ 2]  540 	sllw	x
      00021B 72 FB 01         [ 2]  541 	addw	x, (1, sp)
      00021E 58               [ 2]  542 	sllw	x
      00021F 5B 02            [ 2]  543 	addw	sp, #2
      000221 50               [ 2]  544 	negw	x
      000222 72 FB 03         [ 2]  545 	addw	x, (0x03, sp)
      000225 1F 07            [ 2]  546 	ldw	(0x07, sp), x
                                    547 ;	../src/main.c: 375: fname[3] = firstFileName + 0x30;
      000227 1E 01            [ 2]  548 	ldw	x, (0x01, sp)
      000229 1C 00 03         [ 2]  549 	addw	x, #0x0003
      00022C 7B 08            [ 1]  550 	ld	a, (0x08, sp)
      00022E AB 30            [ 1]  551 	add	a, #0x30
      000230 F7               [ 1]  552 	ld	(x), a
                                    553 ;	../src/main.c: 376: fname[4] = '\0';
      000231 1E 01            [ 2]  554 	ldw	x, (0x01, sp)
      000233 6F 04            [ 1]  555 	clr	(0x0004, x)
                                    556 ;	../src/main.c: 377: }
      000235 5B 04            [ 2]  557 	addw	sp, #4
      000237 81               [ 4]  558 	ret
                                    559 ;	../src/main.c: 392: static UINT GetCfg( uint8_t * pCfgBuf,  cfg_t * pcfg){
                                    560 ;	-----------------------------------------
                                    561 ;	 function GetCfg
                                    562 ;	-----------------------------------------
      000238                        563 _GetCfg:
      000238 52 12            [ 2]  564 	sub	sp, #18
                                    565 ;	../src/main.c: 395: if(!IsValidCfgBuf(pCfgBuf)) return 1; 
      00023A 1E 15            [ 2]  566 	ldw	x, (0x15, sp)
      00023C 89               [ 2]  567 	pushw	x
      00023D CDr03r3B         [ 4]  568 	call	_IsValidCfgBuf
      000240 85               [ 2]  569 	popw	x
      000241 6B 12            [ 1]  570 	ld	(0x12, sp), a
      000243 26 05            [ 1]  571 	jrne	00102$
      000245 5F               [ 1]  572 	clrw	x
      000246 5C               [ 1]  573 	incw	x
      000247 CCr03r38         [ 2]  574 	jp	00106$
      00024A                        575 00102$:
                                    576 ;	../src/main.c: 398: pcfg->sampFreq = pCfgBuf[0]+(((uint16_t)pCfgBuf[1])<<8);
      00024A 16 17            [ 2]  577 	ldw	y, (0x17, sp)
      00024C 17 01            [ 2]  578 	ldw	(0x01, sp), y
      00024E 16 15            [ 2]  579 	ldw	y, (0x15, sp)
      000250 17 03            [ 2]  580 	ldw	(0x03, sp), y
      000252 93               [ 1]  581 	ldw	x, y
      000253 F6               [ 1]  582 	ld	a, (x)
      000254 5F               [ 1]  583 	clrw	x
      000255 97               [ 1]  584 	ld	xl, a
      000256 16 03            [ 2]  585 	ldw	y, (0x03, sp)
      000258 90 E6 01         [ 1]  586 	ld	a, (0x1, y)
      00025B 90 95            [ 1]  587 	ld	yh, a
      00025D 4F               [ 1]  588 	clr	a
      00025E 1F 11            [ 2]  589 	ldw	(0x11, sp), x
      000260 90 97            [ 1]  590 	ld	yl, a
      000262 72 F9 11         [ 2]  591 	addw	y, (0x11, sp)
      000265 1E 01            [ 2]  592 	ldw	x, (0x01, sp)
      000267 FF               [ 2]  593 	ldw	(x), y
                                    594 ;	../src/main.c: 400: fID = pCfgBuf[2]+(((uint16_t)pCfgBuf[3])<<8);
      000268 1E 03            [ 2]  595 	ldw	x, (0x03, sp)
      00026A E6 02            [ 1]  596 	ld	a, (0x2, x)
      00026C 90 5F            [ 1]  597 	clrw	y
      00026E 90 97            [ 1]  598 	ld	yl, a
      000270 1E 03            [ 2]  599 	ldw	x, (0x03, sp)
      000272 E6 03            [ 1]  600 	ld	a, (0x3, x)
      000274 95               [ 1]  601 	ld	xh, a
      000275 4F               [ 1]  602 	clr	a
      000276 17 11            [ 2]  603 	ldw	(0x11, sp), y
      000278 97               [ 1]  604 	ld	xl, a
      000279 72 FB 11         [ 2]  605 	addw	x, (0x11, sp)
                                    606 ;	../src/main.c: 402: ConvertFileName(fID, pcfg->firstFileName);
      00027C 16 01            [ 2]  607 	ldw	y, (0x01, sp)
      00027E 72 A9 00 02      [ 2]  608 	addw	y, #0x0002
      000282 90 89            [ 2]  609 	pushw	y
      000284 89               [ 2]  610 	pushw	x
      000285 CDr01rBF         [ 4]  611 	call	_ConvertFileName
      000288 5B 04            [ 2]  612 	addw	sp, #4
                                    613 ;	../src/main.c: 403: pcfg->fileNo = pCfgBuf[4]+(((uint16_t)pCfgBuf[5])<<8);
      00028A 16 01            [ 2]  614 	ldw	y, (0x01, sp)
      00028C 72 A9 00 0B      [ 2]  615 	addw	y, #0x000b
      000290 1E 03            [ 2]  616 	ldw	x, (0x03, sp)
      000292 E6 04            [ 1]  617 	ld	a, (0x4, x)
      000294 6B 10            [ 1]  618 	ld	(0x10, sp), a
      000296 0F 0F            [ 1]  619 	clr	(0x0f, sp)
      000298 1E 03            [ 2]  620 	ldw	x, (0x03, sp)
      00029A E6 05            [ 1]  621 	ld	a, (0x5, x)
      00029C 6B 11            [ 1]  622 	ld	(0x11, sp), a
      00029E 0F 12            [ 1]  623 	clr	(0x12, sp)
      0002A0 1E 0F            [ 2]  624 	ldw	x, (0x0f, sp)
      0002A2 72 FB 11         [ 2]  625 	addw	x, (0x11, sp)
      0002A5 90 FF            [ 2]  626 	ldw	(y), x
                                    627 ;	../src/main.c: 404: pcfg->fileSzInBlock = pCfgBuf[6]+ \
      0002A7 1E 01            [ 2]  628 	ldw	x, (0x01, sp)
      0002A9 1C 00 07         [ 2]  629 	addw	x, #0x0007
      0002AC 1F 05            [ 2]  630 	ldw	(0x05, sp), x
      0002AE 1E 03            [ 2]  631 	ldw	x, (0x03, sp)
      0002B0 E6 06            [ 1]  632 	ld	a, (0x6, x)
      0002B2 90 97            [ 1]  633 	ld	yl, a
      0002B4 1E 03            [ 2]  634 	ldw	x, (0x03, sp)
      0002B6 E6 07            [ 1]  635 	ld	a, (0x7, x)
      0002B8 0F 11            [ 1]  636 	clr	(0x11, sp)
      0002BA 5F               [ 1]  637 	clrw	x
      0002BB 95               [ 1]  638 	ld	xh, a
      0002BC 7B 11            [ 1]  639 	ld	a, (0x11, sp)
      0002BE 0F 0A            [ 1]  640 	clr	(0x0a, sp)
      0002C0 0F 11            [ 1]  641 	clr	(0x11, sp)
      0002C2 0F 10            [ 1]  642 	clr	(0x10, sp)
      0002C4 0F 0F            [ 1]  643 	clr	(0x0f, sp)
      0002C6 88               [ 1]  644 	push	a
      0002C7 90 9F            [ 1]  645 	ld	a, yl
      0002C9 1B 0B            [ 1]  646 	add	a, (0x0b, sp)
      0002CB 90 97            [ 1]  647 	ld	yl, a
      0002CD 9E               [ 1]  648 	ld	a, xh
      0002CE 19 12            [ 1]  649 	adc	a, (0x12, sp)
      0002D0 90 95            [ 1]  650 	ld	yh, a
      0002D2 84               [ 1]  651 	pop	a
      0002D3 19 10            [ 1]  652 	adc	a, (0x10, sp)
      0002D5 6B 0C            [ 1]  653 	ld	(0x0c, sp), a
      0002D7 9F               [ 1]  654 	ld	a, xl
      0002D8 19 0F            [ 1]  655 	adc	a, (0x0f, sp)
      0002DA 6B 0B            [ 1]  656 	ld	(0x0b, sp), a
      0002DC 1E 03            [ 2]  657 	ldw	x, (0x03, sp)
      0002DE E6 08            [ 1]  658 	ld	a, (0x8, x)
      0002E0 5F               [ 1]  659 	clrw	x
      0002E1 0F 0F            [ 1]  660 	clr	(0x0f, sp)
      0002E3 0F 12            [ 1]  661 	clr	(0x12, sp)
      0002E5 0F 11            [ 1]  662 	clr	(0x11, sp)
      0002E7 72 F9 11         [ 2]  663 	addw	y, (0x11, sp)
      0002EA 19 0C            [ 1]  664 	adc	a, (0x0c, sp)
      0002EC 6B 08            [ 1]  665 	ld	(0x08, sp), a
      0002EE 9F               [ 1]  666 	ld	a, xl
      0002EF 19 0B            [ 1]  667 	adc	a, (0x0b, sp)
      0002F1 6B 07            [ 1]  668 	ld	(0x07, sp), a
      0002F3 1E 03            [ 2]  669 	ldw	x, (0x03, sp)
      0002F5 E6 09            [ 1]  670 	ld	a, (0x9, x)
      0002F7 0F 0F            [ 1]  671 	clr	(0x0f, sp)
      0002F9 0F 0E            [ 1]  672 	clr	(0x0e, sp)
      0002FB 5F               [ 1]  673 	clrw	x
      0002FC 88               [ 1]  674 	push	a
      0002FD 90 9F            [ 1]  675 	ld	a, yl
      0002FF 1B 0F            [ 1]  676 	add	a, (0x0f, sp)
      000301 90 02            [ 1]  677 	rlwa	y
      000303 89               [ 2]  678 	pushw	x
      000304 19 02            [ 1]  679 	adc	a, (2, sp)
      000306 85               [ 2]  680 	popw	x
      000307 90 95            [ 1]  681 	ld	yh, a
      000309 9E               [ 1]  682 	ld	a, xh
      00030A 19 09            [ 1]  683 	adc	a, (0x09, sp)
      00030C 6B 11            [ 1]  684 	ld	(0x11, sp), a
      00030E 84               [ 1]  685 	pop	a
      00030F 19 07            [ 1]  686 	adc	a, (0x07, sp)
      000311 6B 0F            [ 1]  687 	ld	(0x0f, sp), a
      000313 1E 05            [ 2]  688 	ldw	x, (0x05, sp)
      000315 EF 02            [ 2]  689 	ldw	(0x2, x), y
      000317 16 0F            [ 2]  690 	ldw	y, (0x0f, sp)
      000319 FF               [ 2]  691 	ldw	(x), y
                                    692 ;	../src/main.c: 408: pcfg->channel = pCfgBuf[10];
      00031A 1E 01            [ 2]  693 	ldw	x, (0x01, sp)
      00031C 1C 00 0D         [ 2]  694 	addw	x, #0x000d
      00031F 16 03            [ 2]  695 	ldw	y, (0x03, sp)
      000321 90 E6 0A         [ 1]  696 	ld	a, (0xa, y)
      000324 F7               [ 1]  697 	ld	(x), a
                                    698 ;	../src/main.c: 409: if(pCfgBuf[11] == 0)
      000325 1E 03            [ 2]  699 	ldw	x, (0x03, sp)
      000327 E6 0B            [ 1]  700 	ld	a, (0xb, x)
                                    701 ;	../src/main.c: 411: pcfg->isFullResultion = false;
      000329 1E 01            [ 2]  702 	ldw	x, (0x01, sp)
      00032B 1C 00 0E         [ 2]  703 	addw	x, #0x000e
                                    704 ;	../src/main.c: 409: if(pCfgBuf[11] == 0)
      00032E 4D               [ 1]  705 	tnz	a
      00032F 26 03            [ 1]  706 	jrne	00104$
                                    707 ;	../src/main.c: 411: pcfg->isFullResultion = false;
      000331 7F               [ 1]  708 	clr	(x)
      000332 20 03            [ 2]  709 	jra	00105$
      000334                        710 00104$:
                                    711 ;	../src/main.c: 413: pcfg->isFullResultion = true;
      000334 A6 01            [ 1]  712 	ld	a, #0x01
      000336 F7               [ 1]  713 	ld	(x), a
      000337                        714 00105$:
                                    715 ;	../src/main.c: 416: return 0x0;
      000337 5F               [ 1]  716 	clrw	x
      000338                        717 00106$:
                                    718 ;	../src/main.c: 417: }
      000338 5B 12            [ 2]  719 	addw	sp, #18
      00033A 81               [ 4]  720 	ret
                                    721 ;	../src/main.c: 431: static uint8_t IsValidCfgBuf(uint8_t *pCfgBuf){
                                    722 ;	-----------------------------------------
                                    723 ;	 function IsValidCfgBuf
                                    724 ;	-----------------------------------------
      00033B                        725 _IsValidCfgBuf:
      00033B 88               [ 1]  726 	push	a
                                    727 ;	../src/main.c: 432: uint8_t crc = 0;
      00033C 0F 01            [ 1]  728 	clr	(0x01, sp)
                                    729 ;	../src/main.c: 440: return false;	
      00033E 5F               [ 1]  730 	clrw	x
      00033F                        731 00105$:
                                    732 ;	../src/main.c: 434: for(; i < CFG_BUF_SZ - 1; i++){
      00033F A3 00 0C         [ 2]  733 	cpw	x, #0x000c
      000342 2E 0E            [ 1]  734 	jrsge	00101$
                                    735 ;	../src/main.c: 435: crc += pCfgBuf[i];		
      000344 90 93            [ 1]  736 	ldw	y, x
      000346 72 F9 04         [ 2]  737 	addw	y, (0x04, sp)
      000349 90 F6            [ 1]  738 	ld	a, (y)
      00034B 1B 01            [ 1]  739 	add	a, (0x01, sp)
      00034D 6B 01            [ 1]  740 	ld	(0x01, sp), a
                                    741 ;	../src/main.c: 434: for(; i < CFG_BUF_SZ - 1; i++){
      00034F 5C               [ 1]  742 	incw	x
      000350 20 ED            [ 2]  743 	jra	00105$
      000352                        744 00101$:
                                    745 ;	../src/main.c: 437: if(crc == pCfgBuf[CFG_BUF_SZ-1])
      000352 1E 04            [ 2]  746 	ldw	x, (0x04, sp)
      000354 E6 0C            [ 1]  747 	ld	a, (0xc, x)
                                    748 ;	../src/main.c: 438: return true;
      000356 10 01            [ 1]  749 	sub	a, (0x01, sp)
      000358 26 02            [ 1]  750 	jrne	00103$
      00035A 4C               [ 1]  751 	inc	a
                                    752 ;	../src/main.c: 440: return false;	
      00035B 21                     753 	.byte 0x21
      00035C                        754 00103$:
      00035C 4F               [ 1]  755 	clr	a
      00035D                        756 00107$:
                                    757 ;	../src/main.c: 441: }
      00035D 5B 01            [ 2]  758 	addw	sp, #1
      00035F 81               [ 4]  759 	ret
                                    760 ;	../src/main.c: 450: static void clkInit( void )
                                    761 ;	-----------------------------------------
                                    762 ;	 function clkInit
                                    763 ;	-----------------------------------------
      000360                        764 _clkInit:
                                    765 ;	../src/main.c: 453: CLK->CKDIVR = 0;//(CLK_PRESCALER_HSIDIV1|CLK_PRESCALER_CPUDIV1);
      000360 35 00 50 C6      [ 1]  766 	mov	0x50c6+0, #0x00
                                    767 ;	../src/main.c: 461: CLK->PCKENR1 |= (CLK_PCKENR1_TIM4|CLK_PCKENR1_SPI|CLK_PCKENR1_UART1);
      000364 C6 50 C7         [ 1]  768 	ld	a, 0x50c7
      000367 AA 16            [ 1]  769 	or	a, #0x16
      000369 C7 50 C7         [ 1]  770 	ld	0x50c7, a
                                    771 ;	../src/main.c: 462: CLK->PCKENR2 |= (CLK_PCKENR2_ADC);
      00036C 72 16 50 CA      [ 1]  772 	bset	20682, #3
                                    773 ;	../src/main.c: 463: }
      000370 81               [ 4]  774 	ret
                                    775 ;	../src/main.c: 478: void assert_failed(uint8_t* file, uint32_t line)
                                    776 ;	-----------------------------------------
                                    777 ;	 function assert_failed
                                    778 ;	-----------------------------------------
      000371                        779 _assert_failed:
                                    780 ;	../src/main.c: 484: while (1)
      000371                        781 00102$:
      000371 20 FE            [ 2]  782 	jra	00102$
                                    783 ;	../src/main.c: 487: }
      000373 81               [ 4]  784 	ret
                                    785 	.area CODE
                                    786 	.area CONST
                                    787 	.area CONST
      000000                        788 ___str_0:
      000000 43 46 47               789 	.ascii "CFG"
      000003 00                     790 	.db 0x00
                                    791 	.area CODE
                                    792 	.area INITIALIZER
      000000                        793 __xinit__blkCnt:
      000000 00                     794 	.db #0x00	; 0
      000001                        795 __xinit__fileBlkCnt:
      000001 00 00 00 00            796 	.byte #0x00, #0x00, #0x00, #0x00	; 0
      000005                        797 __xinit__fileNoCnt:
      000005 00 00                  798 	.dw #0x0000
                                    799 	.area CABS (ABS)
