                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _SetLedMode
                                     13 	.globl _LedMatrixInit
                                     14 	.globl _pf_write
                                     15 	.globl _pf_read
                                     16 	.globl _pf_open
                                     17 	.globl _pf_mount
                                     18 	.globl _adcInit
                                     19 	.globl _ReadButtonState
                                     20 	.globl _dly
                                     21 	.globl _sysTickInit
                                     22 	.globl _loggerCfg
                                     23 	.globl _assert_failed
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area DATA
      000000                         28 _cfg:
      000000                         29 	.ds 13
      00000D                         30 _loggerCfg::
      00000D                         31 	.ds 15
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area INITIALIZED
      000000                         36 _blkCnt:
      000000                         37 	.ds 1
      000001                         38 _fileBlkCnt:
      000001                         39 	.ds 4
      000005                         40 _fileNoCnt:
      000005                         41 	.ds 2
                                     42 ;--------------------------------------------------------
                                     43 ; Stack segment in internal ram 
                                     44 ;--------------------------------------------------------
                                     45 	.area	SSEG
      000000                         46 __start__stack:
      000000                         47 	.ds	1
                                     48 
                                     49 ;--------------------------------------------------------
                                     50 ; absolute external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area DABS (ABS)
                                     53 
                                     54 ; default segment ordering for linker
                                     55 	.area HOME
                                     56 	.area GSINIT
                                     57 	.area GSFINAL
                                     58 	.area CONST
                                     59 	.area INITIALIZER
                                     60 	.area CODE
                                     61 
                                     62 ;--------------------------------------------------------
                                     63 ; interrupt vector 
                                     64 ;--------------------------------------------------------
                                     65 	.area HOME
      000000                         66 __interrupt_vect:
      000000 82v00u00u00             67 	int s_GSINIT ; reset
      000004 82v00u00u00             68 	int _TRAP_IRQHandler ; trap
      000008 82v00u00u00             69 	int _TLI_IRQHandler ; int0
      00000C 82v00u00u00             70 	int _AWU_IRQHandler ; int1
      000010 82v00u00u00             71 	int _CLK_IRQHandler ; int2
      000014 82v00u00u00             72 	int _EXTI_PORTA_IRQHandler ; int3
      000018 82v00u00u00             73 	int _EXTI_PORTB_IRQHandler ; int4
      00001C 82v00u00u00             74 	int _EXTI_PORTC_IRQHandler ; int5
      000020 82v00u00u00             75 	int _EXTI_PORTD_IRQHandler ; int6
      000024 82v00u00u00             76 	int _EXTI_PORTE_IRQHandler ; int7
      000028 82 00 00 00             77 	int 0x000000 ; int8
      00002C 82 00 00 00             78 	int 0x000000 ; int9
      000030 82v00u00u00             79 	int _SPI_IRQHandler ; int10
      000034 82v00u00u00             80 	int _TIM1_UPD_OVF_TRG_BRK_IRQHandler ; int11
      000038 82v00u00u00             81 	int _TIM1_CAP_COM_IRQHandler ; int12
      00003C 82v00u00u00             82 	int _TIM2_UPD_OVF_BRK_IRQHandler ; int13
      000040 82v00u00u00             83 	int _TIM2_CAP_COM_IRQHandler ; int14
      000044 82 00 00 00             84 	int 0x000000 ; int15
      000048 82 00 00 00             85 	int 0x000000 ; int16
      00004C 82v00u00u00             86 	int _UART1_TX_IRQHandler ; int17
      000050 82v00u00u00             87 	int _UART1_RX_IRQHandler ; int18
      000054 82v00u00u00             88 	int _I2C_IRQHandler ; int19
      000058 82 00 00 00             89 	int 0x000000 ; int20
      00005C 82 00 00 00             90 	int 0x000000 ; int21
      000060 82v00u00u00             91 	int _ADC1_IRQHandler ; int22
      000064 82v00u00u00             92 	int _TIM4_UPD_OVF_IRQHandler ; int23
      000068 82v00u00u00             93 	int _EEPROM_EEC_IRQHandler ; int24
                                     94 ;--------------------------------------------------------
                                     95 ; global & static initialisations
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME
                                     98 	.area GSINIT
                                     99 	.area GSFINAL
                                    100 	.area GSINIT
      000000                        101 __sdcc_init_data:
                                    102 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  103 	ldw x, #l_DATA
      000003 27 07            [ 1]  104 	jreq	00002$
      000005                        105 00001$:
      000005 72 4FuFFuFF      [ 1]  106 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  107 	decw x
      00000A 26 F9            [ 1]  108 	jrne	00001$
      00000C                        109 00002$:
      00000C AEr00r00         [ 2]  110 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  111 	jreq	00004$
      000011                        112 00003$:
      000011 D6uFFuFF         [ 1]  113 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  114 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  115 	decw	x
      000018 26 F7            [ 1]  116 	jrne	00003$
      00001A                        117 00004$:
                                    118 ; stm8_genXINIT() end
                                    119 	.area GSFINAL
      000000 CCr00r6C         [ 2]  120 	jp	__sdcc_program_startup
                                    121 ;--------------------------------------------------------
                                    122 ; Home
                                    123 ;--------------------------------------------------------
                                    124 	.area HOME
                                    125 	.area HOME
      00006C                        126 __sdcc_program_startup:
      00006C CCr00r00         [ 2]  127 	jp	_main
                                    128 ;	return from main will return to caller
                                    129 ;--------------------------------------------------------
                                    130 ; code
                                    131 ;--------------------------------------------------------
                                    132 	.area CODE
                                    133 ;	../src/main.c: 100: void main( void )
                                    134 ;	-----------------------------------------
                                    135 ;	 function main
                                    136 ;	-----------------------------------------
      000000                        137 _main:
      000000 52 34            [ 2]  138 	sub	sp, #52
                                    139 ;	../src/main.c: 111: clkInit();
      000002 CDr04r71         [ 4]  140 	call	_clkInit
                                    141 ;	../src/main.c: 112: LedMatrixInit();
      000005 CDr00r00         [ 4]  142 	call	_LedMatrixInit
                                    143 ;	../src/main.c: 113: sysTickInit();
      000008 CDr00r00         [ 4]  144 	call	_sysTickInit
                                    145 ;	../src/main.c: 116: enableInterrupts();
      00000B 9A               [ 1]  146 	rim
                                    147 ;	../src/main.c: 118: SetLedMode(0, LED_ON);
      00000C 4B 03            [ 1]  148 	push	#0x03
      00000E 4B 00            [ 1]  149 	push	#0x00
      000010 CDr00r00         [ 4]  150 	call	_SetLedMode
      000013 85               [ 2]  151 	popw	x
                                    152 ;	../src/main.c: 119: dly(10000l);
      000014 4B 10            [ 1]  153 	push	#0x10
      000016 4B 27            [ 1]  154 	push	#0x27
      000018 5F               [ 1]  155 	clrw	x
      000019 89               [ 2]  156 	pushw	x
      00001A CDr00r00         [ 4]  157 	call	_dly
      00001D 5B 04            [ 2]  158 	addw	sp, #4
                                    159 ;	../src/main.c: 120: SetLedMode(0, LED_OFF);
      00001F 4B 00            [ 1]  160 	push	#0x00
      000021 4B 00            [ 1]  161 	push	#0x00
      000023 CDr00r00         [ 4]  162 	call	_SetLedMode
      000026 85               [ 2]  163 	popw	x
                                    164 ;	../src/main.c: 121: dly(2000l);
      000027 4B D0            [ 1]  165 	push	#0xd0
      000029 4B 07            [ 1]  166 	push	#0x07
      00002B 5F               [ 1]  167 	clrw	x
      00002C 89               [ 2]  168 	pushw	x
      00002D CDr00r00         [ 4]  169 	call	_dly
      000030 5B 04            [ 2]  170 	addw	sp, #4
                                    171 ;	../src/main.c: 125: while(BUTTON_LNG_PRESSED != ReadButtonState());
      000032                        172 00101$:
      000032 CDr00r00         [ 4]  173 	call	_ReadButtonState
      000035 A1 02            [ 1]  174 	cp	a, #0x02
      000037 26 F9            [ 1]  175 	jrne	00101$
                                    176 ;	../src/main.c: 130: res |= pf_mount(&fid);	
      000039 96               [ 1]  177 	ldw	x, sp
      00003A 1C 00 03         [ 2]  178 	addw	x, #3
      00003D 89               [ 2]  179 	pushw	x
      00003E CDr00r00         [ 4]  180 	call	_pf_mount
      000041 85               [ 2]  181 	popw	x
      000042 6B 34            [ 1]  182 	ld	(0x34, sp), a
                                    183 ;	../src/main.c: 131: res |= pf_open("CFG");
      000044 4Br00            [ 1]  184 	push	#<(___str_0+0)
      000046 4Bs00            [ 1]  185 	push	#((___str_0+0) >> 8)
      000048 CDr00r00         [ 4]  186 	call	_pf_open
      00004B 85               [ 2]  187 	popw	x
      00004C 1A 34            [ 1]  188 	or	a, (0x34, sp)
      00004E 6B 34            [ 1]  189 	ld	(0x34, sp), a
                                    190 ;	../src/main.c: 132: res |= pf_read(cfg, 13 , &pbr);
      000050 96               [ 1]  191 	ldw	x, sp
      000051 5C               [ 1]  192 	incw	x
      000052 89               [ 2]  193 	pushw	x
      000053 4B 0D            [ 1]  194 	push	#0x0d
      000055 4B 00            [ 1]  195 	push	#0x00
      000057 4Br00            [ 1]  196 	push	#<(_cfg+0)
      000059 4Bs00            [ 1]  197 	push	#((_cfg+0) >> 8)
      00005B CDr00r00         [ 4]  198 	call	_pf_read
      00005E 5B 06            [ 2]  199 	addw	sp, #6
      000060 1A 34            [ 1]  200 	or	a, (0x34, sp)
      000062 6B 34            [ 1]  201 	ld	(0x34, sp), a
                                    202 ;	../src/main.c: 134: res |= GetCfg(cfg, &loggerCfg);
      000064 4Br0D            [ 1]  203 	push	#<(_loggerCfg+0)
      000066 4Bs00            [ 1]  204 	push	#((_loggerCfg+0) >> 8)
      000068 4Br00            [ 1]  205 	push	#<(_cfg+0)
      00006A 4Bs00            [ 1]  206 	push	#((_cfg+0) >> 8)
      00006C CDr03r49         [ 4]  207 	call	_GetCfg
      00006F 5B 04            [ 2]  208 	addw	sp, #4
      000071 9F               [ 1]  209 	ld	a, xl
      000072 1A 34            [ 1]  210 	or	a, (0x34, sp)
      000074 6B 30            [ 1]  211 	ld	(0x30, sp), a
                                    212 ;	../src/main.c: 138: fileBlkCnt = loggerCfg.fileSzInBlock;
      000076 AEr00r14         [ 2]  213 	ldw	x, #(_loggerCfg+0)+7
      000079 1F 31            [ 2]  214 	ldw	(0x31, sp), x
                                    215 ;	../src/main.c: 141: res |= pf_open(loggerCfg.firstFileName);
      00007B AEr00r0F         [ 2]  216 	ldw	x, #(_loggerCfg+0)+2
      00007E 1F 33            [ 2]  217 	ldw	(0x33, sp), x
                                    218 ;	../src/main.c: 136: if(FR_OK == res){
      000080 0D 30            [ 1]  219 	tnz	(0x30, sp)
      000082 26 35            [ 1]  220 	jrne	00108$
                                    221 ;	../src/main.c: 138: fileBlkCnt = loggerCfg.fileSzInBlock;
      000084 1E 31            [ 2]  222 	ldw	x, (0x31, sp)
      000086 90 93            [ 1]  223 	ldw	y, x
      000088 90 EE 02         [ 2]  224 	ldw	y, (0x2, y)
      00008B FE               [ 2]  225 	ldw	x, (x)
      00008C 90 CFu00u03      [ 2]  226 	ldw	_fileBlkCnt+2, y
      000090 CFu00u01         [ 2]  227 	ldw	_fileBlkCnt+0, x
                                    228 ;	../src/main.c: 139: fileNoCnt = loggerCfg.fileNo;
      000093 CEu00u18         [ 2]  229 	ldw	x, _loggerCfg+11
      000096 CFu00u05         [ 2]  230 	ldw	_fileNoCnt+0, x
                                    231 ;	../src/main.c: 141: res |= pf_open(loggerCfg.firstFileName);
      000099 1E 33            [ 2]  232 	ldw	x, (0x33, sp)
      00009B 89               [ 2]  233 	pushw	x
      00009C CDr00r00         [ 4]  234 	call	_pf_open
      00009F 85               [ 2]  235 	popw	x
                                    236 ;	../src/main.c: 143: if(FR_OK == res){
      0000A0 1A 30            [ 1]  237 	or	a, (0x30, sp)
      0000A2 26 06            [ 1]  238 	jrne	00105$
                                    239 ;	../src/main.c: 146: fsm.state = S0_RST;
      0000A4 0F 2D            [ 1]  240 	clr	(0x2d, sp)
                                    241 ;	../src/main.c: 147: fsm.error = NO_ERR;
      0000A6 0F 2E            [ 1]  242 	clr	(0x2e, sp)
      0000A8 20 08            [ 2]  243 	jra	00106$
      0000AA                        244 00105$:
                                    245 ;	../src/main.c: 150: fsm.state = S4_ERR;
      0000AA A6 04            [ 1]  246 	ld	a, #0x04
      0000AC 6B 2D            [ 1]  247 	ld	(0x2d, sp), a
                                    248 ;	../src/main.c: 151: fsm.error = ERR_CARD_INIT;
      0000AE A6 01            [ 1]  249 	ld	a, #0x01
      0000B0 6B 2E            [ 1]  250 	ld	(0x2e, sp), a
      0000B2                        251 00106$:
                                    252 ;	../src/main.c: 154: disableInterrupts();
      0000B2 9B               [ 1]  253 	sim
                                    254 ;	../src/main.c: 155: adcInit();
      0000B3 CDr00r00         [ 4]  255 	call	_adcInit
                                    256 ;	../src/main.c: 157: enableInterrupts();
      0000B6 9A               [ 1]  257 	rim
      0000B7 20 08            [ 2]  258 	jra	00109$
      0000B9                        259 00108$:
                                    260 ;	../src/main.c: 160: fsm.state = S4_ERR;
      0000B9 A6 04            [ 1]  261 	ld	a, #0x04
      0000BB 6B 2D            [ 1]  262 	ld	(0x2d, sp), a
                                    263 ;	../src/main.c: 161: fsm.error = ERR_CARD_INIT;
      0000BD A6 01            [ 1]  264 	ld	a, #0x01
      0000BF 6B 2E            [ 1]  265 	ld	(0x2e, sp), a
      0000C1                        266 00109$:
                                    267 ;	../src/main.c: 163: SetLedMode(0, LED_TOGGLE_FAST);
      0000C1 4B 02            [ 1]  268 	push	#0x02
      0000C3 4B 00            [ 1]  269 	push	#0x00
      0000C5 CDr00r00         [ 4]  270 	call	_SetLedMode
      0000C8 85               [ 2]  271 	popw	x
                                    272 ;	../src/main.c: 165: while(1){
      0000C9 16 31            [ 2]  273 	ldw	y, (0x31, sp)
      0000CB 17 2F            [ 2]  274 	ldw	(0x2f, sp), y
      0000CD 16 33            [ 2]  275 	ldw	y, (0x33, sp)
      0000CF 17 31            [ 2]  276 	ldw	(0x31, sp), y
      0000D1                        277 00141$:
                                    278 ;	../src/main.c: 166: bs = ReadButtonState();
      0000D1 CDr00r00         [ 4]  279 	call	_ReadButtonState
                                    280 ;	../src/main.c: 167: if(BUTTON_LNG_PRESSED == bs){
      0000D4 A1 02            [ 1]  281 	cp	a, #0x02
      0000D6 26 04            [ 1]  282 	jrne	00111$
                                    283 ;	../src/main.c: 168: fsm.state = S5_COMPLETE;
      0000D8 A6 05            [ 1]  284 	ld	a, #0x05
      0000DA 6B 2D            [ 1]  285 	ld	(0x2d, sp), a
      0000DC                        286 00111$:
                                    287 ;	../src/main.c: 173: switch (fsm.state){
      0000DC 7B 2D            [ 1]  288 	ld	a, (0x2d, sp)
      0000DE A1 05            [ 1]  289 	cp	a, #0x05
      0000E0 22 EF            [ 1]  290 	jrugt	00141$
      0000E2 5F               [ 1]  291 	clrw	x
      0000E3 97               [ 1]  292 	ld	xl, a
      0000E4 58               [ 2]  293 	sllw	x
      0000E5 DEu00uE9         [ 2]  294 	ldw	x, (#00224$, x)
      0000E8 FC               [ 2]  295 	jp	(x)
      0000E9                        296 00224$:
      0000E9r00rF5                  297 	.dw	#00112$
      0000EBr01r20                  298 	.dw	#00122$
      0000EDr01r20                  299 	.dw	#00122$
      0000EFr01r2B                  300 	.dw	#00123$
      0000F1r01r67                  301 	.dw	#00130$
      0000F3r01r79                  302 	.dw	#00134$
                                    303 ;	../src/main.c: 174: case S0_RST:
      0000F5                        304 00112$:
                                    305 ;	../src/main.c: 177: if( 0x3 == buffer_rdy ){
      0000F5 C6u00u00         [ 1]  306 	ld	a, _buffer_rdy+0
      0000F8 A1 03            [ 1]  307 	cp	a, #0x03
      0000FA 26 0B            [ 1]  308 	jrne	00119$
                                    309 ;	../src/main.c: 180: fsm.state = S4_ERR;
      0000FC A6 04            [ 1]  310 	ld	a, #0x04
      0000FE 6B 2D            [ 1]  311 	ld	(0x2d, sp), a
                                    312 ;	../src/main.c: 181: fsm.error = ERR_BUFF_OVERLAP;
      000100 96               [ 1]  313 	ldw	x, sp
      000101 A6 05            [ 1]  314 	ld	a, #0x05
      000103 E7 2E            [ 1]  315 	ld	(46, x), a
      000105 20 CA            [ 2]  316 	jra	00141$
      000107                        317 00119$:
                                    318 ;	../src/main.c: 182: } else if (0x01 == buffer_rdy) {
      000107 C6u00u00         [ 1]  319 	ld	a, _buffer_rdy+0
      00010A 4A               [ 1]  320 	dec	a
      00010B 26 06            [ 1]  321 	jrne	00116$
                                    322 ;	../src/main.c: 184: fsm.state = S1_WR_BUF0;
      00010D A6 01            [ 1]  323 	ld	a, #0x01
      00010F 6B 2D            [ 1]  324 	ld	(0x2d, sp), a
      000111 20 BE            [ 2]  325 	jra	00141$
      000113                        326 00116$:
                                    327 ;	../src/main.c: 185: } else if ( 0x02 == buffer_rdy) {
      000113 C6u00u00         [ 1]  328 	ld	a, _buffer_rdy+0
      000116 A1 02            [ 1]  329 	cp	a, #0x02
      000118 26 B7            [ 1]  330 	jrne	00141$
                                    331 ;	../src/main.c: 187: fsm.state = S2_WR_BUF1;
      00011A A6 02            [ 1]  332 	ld	a, #0x02
      00011C 6B 2D            [ 1]  333 	ld	(0x2d, sp), a
                                    334 ;	../src/main.c: 189: break;
      00011E 20 B1            [ 2]  335 	jra	00141$
                                    336 ;	../src/main.c: 191: case S2_WR_BUF1:
      000120                        337 00122$:
                                    338 ;	../src/main.c: 193: Wr2SD(&fsm);
      000120 96               [ 1]  339 	ldw	x, sp
      000121 1C 00 2D         [ 2]  340 	addw	x, #45
      000124 89               [ 2]  341 	pushw	x
      000125 CDr01r8E         [ 4]  342 	call	_Wr2SD
      000128 85               [ 2]  343 	popw	x
                                    344 ;	../src/main.c: 194: break;
      000129 20 A6            [ 2]  345 	jra	00141$
                                    346 ;	../src/main.c: 195: case S3_NXT_FILE:
      00012B                        347 00123$:
                                    348 ;	../src/main.c: 196: fileBlkCnt = loggerCfg.fileSzInBlock;
      00012B 1E 2F            [ 2]  349 	ldw	x, (0x2f, sp)
      00012D 90 93            [ 1]  350 	ldw	y, x
      00012F 90 EE 02         [ 2]  351 	ldw	y, (0x2, y)
      000132 FE               [ 2]  352 	ldw	x, (x)
      000133 90 CFu00u03      [ 2]  353 	ldw	_fileBlkCnt+2, y
      000137 CFu00u01         [ 2]  354 	ldw	_fileBlkCnt+0, x
                                    355 ;	../src/main.c: 198: if(--fileNoCnt != 0){
      00013A CEu00u05         [ 2]  356 	ldw	x, _fileNoCnt+0
      00013D 5A               [ 2]  357 	decw	x
      00013E CFu00u05         [ 2]  358 	ldw	_fileNoCnt+0, x
      000141 27 1D            [ 1]  359 	jreq	00128$
                                    360 ;	../src/main.c: 200: GetNxtFileName(loggerCfg.firstFileName);
      000143 1E 31            [ 2]  361 	ldw	x, (0x31, sp)
      000145 89               [ 2]  362 	pushw	x
      000146 CDr02r33         [ 4]  363 	call	_GetNxtFileName
      000149 85               [ 2]  364 	popw	x
                                    365 ;	../src/main.c: 202: res = pf_open(loggerCfg.firstFileName);
      00014A 1E 33            [ 2]  366 	ldw	x, (0x33, sp)
      00014C 89               [ 2]  367 	pushw	x
      00014D CDr00r00         [ 4]  368 	call	_pf_open
      000150 85               [ 2]  369 	popw	x
                                    370 ;	../src/main.c: 203: if( FR_OK != res ){
      000151 4D               [ 1]  371 	tnz	a
      000152 27 07            [ 1]  372 	jreq	00125$
                                    373 ;	../src/main.c: 204: fsm.state = S4_ERR;
      000154 A6 04            [ 1]  374 	ld	a, #0x04
      000156 6B 2D            [ 1]  375 	ld	(0x2d, sp), a
      000158 CCr00rD1         [ 2]  376 	jp	00141$
      00015B                        377 00125$:
                                    378 ;	../src/main.c: 207: fsm.state = S0_RST;
      00015B 0F 2D            [ 1]  379 	clr	(0x2d, sp)
      00015D CCr00rD1         [ 2]  380 	jp	00141$
      000160                        381 00128$:
                                    382 ;	../src/main.c: 213: fsm.state = S5_COMPLETE;
      000160 A6 05            [ 1]  383 	ld	a, #0x05
      000162 6B 2D            [ 1]  384 	ld	(0x2d, sp), a
                                    385 ;	../src/main.c: 216: break;
      000164 CCr00rD1         [ 2]  386 	jp	00141$
                                    387 ;	../src/main.c: 218: case S4_ERR:
      000167                        388 00130$:
                                    389 ;	../src/main.c: 219: SetLedMode(0, LED_OFF);
      000167 4B 00            [ 1]  390 	push	#0x00
      000169 4B 00            [ 1]  391 	push	#0x00
      00016B CDr00r00         [ 4]  392 	call	_SetLedMode
      00016E 85               [ 2]  393 	popw	x
                                    394 ;	../src/main.c: 220: SetLedMode(1, LED_TOGGLE_FAST);
      00016F 4B 02            [ 1]  395 	push	#0x02
      000171 4B 01            [ 1]  396 	push	#0x01
      000173 CDr00r00         [ 4]  397 	call	_SetLedMode
      000176 85               [ 2]  398 	popw	x
                                    399 ;	../src/main.c: 221: while(1); break;
      000177                        400 00132$:
      000177 20 FE            [ 2]  401 	jra	00132$
                                    402 ;	../src/main.c: 222: case S5_COMPLETE:
      000179                        403 00134$:
                                    404 ;	../src/main.c: 223: SetLedMode(0, LED_OFF);
      000179 4B 00            [ 1]  405 	push	#0x00
      00017B 4B 00            [ 1]  406 	push	#0x00
      00017D CDr00r00         [ 4]  407 	call	_SetLedMode
      000180 85               [ 2]  408 	popw	x
                                    409 ;	../src/main.c: 224: SetLedMode(1, LED_ON);
      000181 4B 03            [ 1]  410 	push	#0x03
      000183 4B 01            [ 1]  411 	push	#0x01
      000185 CDr00r00         [ 4]  412 	call	_SetLedMode
      000188 85               [ 2]  413 	popw	x
                                    414 ;	../src/main.c: 225: while(1);
      000189                        415 00136$:
      000189 20 FE            [ 2]  416 	jra	00136$
                                    417 ;	../src/main.c: 228: }
                                    418 ;	../src/main.c: 230: }
      00018B 5B 34            [ 2]  419 	addw	sp, #52
      00018D 81               [ 4]  420 	ret
                                    421 ;	../src/main.c: 243: static void Wr2SD( fsm_t * pfsm ){
                                    422 ;	-----------------------------------------
                                    423 ;	 function Wr2SD
                                    424 ;	-----------------------------------------
      00018E                        425 _Wr2SD:
      00018E 52 06            [ 2]  426 	sub	sp, #6
                                    427 ;	../src/main.c: 250: if( S1_WR_BUF0 == pfsm->state){
      000190 16 09            [ 2]  428 	ldw	y, (0x09, sp)
      000192 17 03            [ 2]  429 	ldw	(0x03, sp), y
      000194 93               [ 1]  430 	ldw	x, y
      000195 F6               [ 1]  431 	ld	a, (x)
      000196 4A               [ 1]  432 	dec	a
      000197 26 07            [ 1]  433 	jrne	00102$
                                    434 ;	../src/main.c: 251: pBuf = adcBuffer0; bufNo = 0;
      000199 90 AEr00r00      [ 2]  435 	ldw	y, #_adcBuffer0+0
      00019D 5F               [ 1]  436 	clrw	x
      00019E 20 07            [ 2]  437 	jra	00103$
      0001A0                        438 00102$:
                                    439 ;	../src/main.c: 253: pBuf = adcBuffer1; bufNo = 1;
      0001A0 90 AEr00r00      [ 2]  440 	ldw	y, #(_adcBuffer1+0)
      0001A4 A6 01            [ 1]  441 	ld	a, #0x01
      0001A6 97               [ 1]  442 	ld	xl, a
      0001A7                        443 00103$:
                                    444 ;	../src/main.c: 255: RELEASE_BUFF_FOR_WR(bufNo); //clear this flag
      0001A7 A6 01            [ 1]  445 	ld	a, #0x01
      0001A9 88               [ 1]  446 	push	a
      0001AA 9F               [ 1]  447 	ld	a, xl
      0001AB 4D               [ 1]  448 	tnz	a
      0001AC 27 05            [ 1]  449 	jreq	00143$
      0001AE                        450 00142$:
      0001AE 08 01            [ 1]  451 	sll	(1, sp)
      0001B0 4A               [ 1]  452 	dec	a
      0001B1 26 FB            [ 1]  453 	jrne	00142$
      0001B3                        454 00143$:
      0001B3 84               [ 1]  455 	pop	a
      0001B4 43               [ 1]  456 	cpl	a
      0001B5 C4u00u00         [ 1]  457 	and	a, _buffer_rdy+0
      0001B8 C7u00u00         [ 1]  458 	ld	_buffer_rdy+0, a
                                    459 ;	../src/main.c: 259: res = pf_write((void*)pBuf,BUFFER_SZ_IN_BYTES, &pbr);
      0001BB 96               [ 1]  460 	ldw	x, sp
      0001BC 5C               [ 1]  461 	incw	x
      0001BD 89               [ 2]  462 	pushw	x
      0001BE 4B 00            [ 1]  463 	push	#0x00
      0001C0 4B 01            [ 1]  464 	push	#0x01
      0001C2 90 89            [ 2]  465 	pushw	y
      0001C4 CDr00r00         [ 4]  466 	call	_pf_write
      0001C7 5B 06            [ 2]  467 	addw	sp, #6
                                    468 ;	../src/main.c: 266: pfsm->error = ERR_WR_DATA;
      0001C9 1E 03            [ 2]  469 	ldw	x, (0x03, sp)
      0001CB 5C               [ 1]  470 	incw	x
      0001CC 1F 05            [ 2]  471 	ldw	(0x05, sp), x
                                    472 ;	../src/main.c: 263: if(FR_OK != res){
      0001CE 4D               [ 1]  473 	tnz	a
      0001CF 27 0C            [ 1]  474 	jreq	00105$
                                    475 ;	../src/main.c: 266: pfsm->error = ERR_WR_DATA;
      0001D1 1E 05            [ 2]  476 	ldw	x, (0x05, sp)
      0001D3 A6 02            [ 1]  477 	ld	a, #0x02
      0001D5 F7               [ 1]  478 	ld	(x), a
                                    479 ;	../src/main.c: 267: pfsm->state = S4_ERR;
      0001D6 1E 03            [ 2]  480 	ldw	x, (0x03, sp)
      0001D8 A6 04            [ 1]  481 	ld	a, #0x04
      0001DA F7               [ 1]  482 	ld	(x), a
                                    483 ;	../src/main.c: 268: return;
      0001DB 20 53            [ 2]  484 	jra	00112$
      0001DD                        485 00105$:
                                    486 ;	../src/main.c: 271: if(NO_BUFF_PER_BLK == ++blkCnt){
      0001DD 72 5Cu00u00      [ 1]  487 	inc	_blkCnt+0
      0001E1 C6u00u00         [ 1]  488 	ld	a, _blkCnt+0
      0001E4 A1 02            [ 1]  489 	cp	a, #0x02
      0001E6 26 45            [ 1]  490 	jrne	00111$
                                    491 ;	../src/main.c: 273: blkCnt = 0;
      0001E8 72 5Fu00u00      [ 1]  492 	clr	_blkCnt+0
                                    493 ;	../src/main.c: 274: res = pf_write(0,0,&pbr);
      0001EC 96               [ 1]  494 	ldw	x, sp
      0001ED 5C               [ 1]  495 	incw	x
      0001EE 89               [ 2]  496 	pushw	x
      0001EF 5F               [ 1]  497 	clrw	x
      0001F0 89               [ 2]  498 	pushw	x
      0001F1 5F               [ 1]  499 	clrw	x
      0001F2 89               [ 2]  500 	pushw	x
      0001F3 CDr00r00         [ 4]  501 	call	_pf_write
      0001F6 5B 06            [ 2]  502 	addw	sp, #6
                                    503 ;	../src/main.c: 277: if(FR_OK != res){
      0001F8 4D               [ 1]  504 	tnz	a
      0001F9 27 0C            [ 1]  505 	jreq	00107$
                                    506 ;	../src/main.c: 279: pfsm->error = ERR_WR_NO_RESP;
      0001FB 1E 05            [ 2]  507 	ldw	x, (0x05, sp)
      0001FD A6 03            [ 1]  508 	ld	a, #0x03
      0001FF F7               [ 1]  509 	ld	(x), a
                                    510 ;	../src/main.c: 280: pfsm->state = S4_ERR;
      000200 1E 03            [ 2]  511 	ldw	x, (0x03, sp)
      000202 A6 04            [ 1]  512 	ld	a, #0x04
      000204 F7               [ 1]  513 	ld	(x), a
                                    514 ;	../src/main.c: 281: return;
      000205 20 29            [ 2]  515 	jra	00112$
      000207                        516 00107$:
                                    517 ;	../src/main.c: 284: if(0 == --fileBlkCnt){
      000207 CEu00u03         [ 2]  518 	ldw	x, _fileBlkCnt+2
      00020A 1D 00 01         [ 2]  519 	subw	x, #0x0001
      00020D 90 CEu00u01      [ 2]  520 	ldw	y, _fileBlkCnt+0
      000211 24 02            [ 1]  521 	jrnc	00149$
      000213 90 5A            [ 2]  522 	decw	y
      000215                        523 00149$:
      000215 CFu00u03         [ 2]  524 	ldw	_fileBlkCnt+2, x
      000218 90 CFu00u01      [ 2]  525 	ldw	_fileBlkCnt+0, y
      00021C CEu00u03         [ 2]  526 	ldw	x, _fileBlkCnt+2
      00021F 26 0C            [ 1]  527 	jrne	00111$
      000221 CEu00u01         [ 2]  528 	ldw	x, _fileBlkCnt+0
      000224 26 07            [ 1]  529 	jrne	00111$
                                    530 ;	../src/main.c: 287: pfsm->state = S3_NXT_FILE;
      000226 1E 03            [ 2]  531 	ldw	x, (0x03, sp)
      000228 A6 03            [ 1]  532 	ld	a, #0x03
      00022A F7               [ 1]  533 	ld	(x), a
                                    534 ;	../src/main.c: 288: return;
      00022B 20 03            [ 2]  535 	jra	00112$
      00022D                        536 00111$:
                                    537 ;	../src/main.c: 293: pfsm->state = S0_RST; 
      00022D 1E 03            [ 2]  538 	ldw	x, (0x03, sp)
      00022F 7F               [ 1]  539 	clr	(x)
      000230                        540 00112$:
                                    541 ;	../src/main.c: 294: }
      000230 5B 06            [ 2]  542 	addw	sp, #6
      000232 81               [ 4]  543 	ret
                                    544 ;	../src/main.c: 307: static void GetNxtFileName( char * fname){
                                    545 ;	-----------------------------------------
                                    546 ;	 function GetNxtFileName
                                    547 ;	-----------------------------------------
      000233                        548 _GetNxtFileName:
      000233 52 05            [ 2]  549 	sub	sp, #5
                                    550 ;	../src/main.c: 308: uint8_t val = 0;
      000235 0F 01            [ 1]  551 	clr	(0x01, sp)
                                    552 ;	../src/main.c: 310: if(0x39 == fname[3]){
      000237 1E 08            [ 2]  553 	ldw	x, (0x08, sp)
      000239 E6 03            [ 1]  554 	ld	a, (0x3, x)
                                    555 ;	../src/main.c: 311: val = 0x01;
      00023B A0 39            [ 1]  556 	sub	a, #0x39
      00023D 26 03            [ 1]  557 	jrne	00102$
      00023F 4C               [ 1]  558 	inc	a
      000240 6B 01            [ 1]  559 	ld	(0x01, sp), a
      000242                        560 00102$:
                                    561 ;	../src/main.c: 313: if(0x39 == fname[2]) {
      000242 1E 08            [ 2]  562 	ldw	x, (0x08, sp)
      000244 E6 02            [ 1]  563 	ld	a, (0x2, x)
      000246 A1 39            [ 1]  564 	cp	a, #0x39
      000248 26 06            [ 1]  565 	jrne	00104$
                                    566 ;	../src/main.c: 314: val += 0x02;
      00024A 7B 01            [ 1]  567 	ld	a, (0x01, sp)
      00024C AB 02            [ 1]  568 	add	a, #0x02
      00024E 6B 01            [ 1]  569 	ld	(0x01, sp), a
      000250                        570 00104$:
                                    571 ;	../src/main.c: 316: if(0x39 == fname[1]) {
      000250 1E 08            [ 2]  572 	ldw	x, (0x08, sp)
      000252 E6 01            [ 1]  573 	ld	a, (0x1, x)
      000254 A1 39            [ 1]  574 	cp	a, #0x39
      000256 26 06            [ 1]  575 	jrne	00106$
                                    576 ;	../src/main.c: 317: val += 0x04;
      000258 7B 01            [ 1]  577 	ld	a, (0x01, sp)
      00025A AB 04            [ 1]  578 	add	a, #0x04
      00025C 6B 01            [ 1]  579 	ld	(0x01, sp), a
      00025E                        580 00106$:
                                    581 ;	../src/main.c: 319: if(0x39 == fname[0]) {
      00025E 16 08            [ 2]  582 	ldw	y, (0x08, sp)
      000260 17 02            [ 2]  583 	ldw	(0x02, sp), y
      000262 93               [ 1]  584 	ldw	x, y
      000263 F6               [ 1]  585 	ld	a, (x)
      000264 A1 39            [ 1]  586 	cp	a, #0x39
      000266 26 06            [ 1]  587 	jrne	00108$
                                    588 ;	../src/main.c: 320: val += 0x08;
      000268 7B 01            [ 1]  589 	ld	a, (0x01, sp)
      00026A AB 08            [ 1]  590 	add	a, #0x08
      00026C 6B 01            [ 1]  591 	ld	(0x01, sp), a
      00026E                        592 00108$:
                                    593 ;	../src/main.c: 324: case 0x01: fname[3] = 0x30; 
      00026E 1E 02            [ 2]  594 	ldw	x, (0x02, sp)
      000270 1C 00 03         [ 2]  595 	addw	x, #0x0003
                                    596 ;	../src/main.c: 325: fname[2]++;break;
      000273 16 02            [ 2]  597 	ldw	y, (0x02, sp)
      000275 90 5C            [ 1]  598 	incw	y
      000277 90 5C            [ 1]  599 	incw	y
      000279 17 04            [ 2]  600 	ldw	(0x04, sp), y
                                    601 ;	../src/main.c: 323: switch(val){
      00027B 7B 01            [ 1]  602 	ld	a, (0x01, sp)
      00027D 4A               [ 1]  603 	dec	a
      00027E 27 18            [ 1]  604 	jreq	00109$
                                    605 ;	../src/main.c: 328: fname[1]++; break;
      000280 16 02            [ 2]  606 	ldw	y, (0x02, sp)
      000282 90 5C            [ 1]  607 	incw	y
                                    608 ;	../src/main.c: 323: switch(val){
      000284 7B 01            [ 1]  609 	ld	a, (0x01, sp)
      000286 A1 03            [ 1]  610 	cp	a, #0x03
      000288 27 16            [ 1]  611 	jreq	00110$
      00028A 7B 01            [ 1]  612 	ld	a, (0x01, sp)
      00028C A1 07            [ 1]  613 	cp	a, #0x07
      00028E 27 1C            [ 1]  614 	jreq	00111$
      000290 7B 01            [ 1]  615 	ld	a, (0x01, sp)
      000292 A1 0F            [ 1]  616 	cp	a, #0x0f
      000294 27 25            [ 1]  617 	jreq	00112$
      000296 20 34            [ 2]  618 	jra	00113$
                                    619 ;	../src/main.c: 324: case 0x01: fname[3] = 0x30; 
      000298                        620 00109$:
      000298 A6 30            [ 1]  621 	ld	a, #0x30
      00029A F7               [ 1]  622 	ld	(x), a
                                    623 ;	../src/main.c: 325: fname[2]++;break;
      00029B 1E 04            [ 2]  624 	ldw	x, (0x04, sp)
      00029D 7C               [ 1]  625 	inc	(x)
      00029E 20 2D            [ 2]  626 	jra	00115$
                                    627 ;	../src/main.c: 326: case 0x03: fname[3] = 0x30; 
      0002A0                        628 00110$:
      0002A0 A6 30            [ 1]  629 	ld	a, #0x30
      0002A2 F7               [ 1]  630 	ld	(x), a
                                    631 ;	../src/main.c: 327: fname[2] = 0x30; 
      0002A3 1E 04            [ 2]  632 	ldw	x, (0x04, sp)
      0002A5 A6 30            [ 1]  633 	ld	a, #0x30
      0002A7 F7               [ 1]  634 	ld	(x), a
                                    635 ;	../src/main.c: 328: fname[1]++; break;
      0002A8 90 7C            [ 1]  636 	inc	(y)
      0002AA 20 21            [ 2]  637 	jra	00115$
                                    638 ;	../src/main.c: 329: case 0x07: fname[3] = 0x30; 
      0002AC                        639 00111$:
      0002AC A6 30            [ 1]  640 	ld	a, #0x30
      0002AE F7               [ 1]  641 	ld	(x), a
                                    642 ;	../src/main.c: 330: fname[2] = 0x30; 
      0002AF 1E 04            [ 2]  643 	ldw	x, (0x04, sp)
                                    644 ;	../src/main.c: 331: fname[1] = 0x30; 
      0002B1 A6 30            [ 1]  645 	ld	a, #0x30
      0002B3 F7               [ 1]  646 	ld	(x), a
      0002B4 90 F7            [ 1]  647 	ld	(y), a
                                    648 ;	../src/main.c: 332: fname[0]++; break;
      0002B6 1E 02            [ 2]  649 	ldw	x, (0x02, sp)
      0002B8 7C               [ 1]  650 	inc	(x)
      0002B9 20 12            [ 2]  651 	jra	00115$
                                    652 ;	../src/main.c: 333: case 0x0f: fname[3] = 0x30; 
      0002BB                        653 00112$:
      0002BB A6 30            [ 1]  654 	ld	a, #0x30
      0002BD F7               [ 1]  655 	ld	(x), a
                                    656 ;	../src/main.c: 334: fname[2] = 0x30; 
      0002BE 1E 04            [ 2]  657 	ldw	x, (0x04, sp)
                                    658 ;	../src/main.c: 335: fname[1] = 0x30; 
      0002C0 A6 30            [ 1]  659 	ld	a, #0x30
      0002C2 F7               [ 1]  660 	ld	(x), a
      0002C3 90 F7            [ 1]  661 	ld	(y), a
                                    662 ;	../src/main.c: 336: fname[0] = 0x30; break;
      0002C5 1E 02            [ 2]  663 	ldw	x, (0x02, sp)
      0002C7 A6 30            [ 1]  664 	ld	a, #0x30
      0002C9 F7               [ 1]  665 	ld	(x), a
      0002CA 20 01            [ 2]  666 	jra	00115$
                                    667 ;	../src/main.c: 337: default: fname[3]++; break;
      0002CC                        668 00113$:
      0002CC 7C               [ 1]  669 	inc	(x)
                                    670 ;	../src/main.c: 338: }
      0002CD                        671 00115$:
                                    672 ;	../src/main.c: 339: }
      0002CD 5B 05            [ 2]  673 	addw	sp, #5
      0002CF 81               [ 4]  674 	ret
                                    675 ;	../src/main.c: 352: static void ConvertFileName(uint16_t firstFileName, char * fname){
                                    676 ;	-----------------------------------------
                                    677 ;	 function ConvertFileName
                                    678 ;	-----------------------------------------
      0002D0                        679 _ConvertFileName:
      0002D0 52 04            [ 2]  680 	sub	sp, #4
                                    681 ;	../src/main.c: 355: val = firstFileName/1000;
      0002D2 16 07            [ 2]  682 	ldw	y, (0x07, sp)
      0002D4 17 03            [ 2]  683 	ldw	(0x03, sp), y
      0002D6 93               [ 1]  684 	ldw	x, y
      0002D7 90 AE 03 E8      [ 2]  685 	ldw	y, #0x03e8
      0002DB 65               [ 2]  686 	divw	x, y
                                    687 ;	../src/main.c: 356: fname[0] = val + 0x30;
      0002DC 16 09            [ 2]  688 	ldw	y, (0x09, sp)
      0002DE 17 01            [ 2]  689 	ldw	(0x01, sp), y
      0002E0 9F               [ 1]  690 	ld	a, xl
      0002E1 AB 30            [ 1]  691 	add	a, #0x30
      0002E3 16 01            [ 2]  692 	ldw	y, (0x01, sp)
      0002E5 90 F7            [ 1]  693 	ld	(y), a
                                    694 ;	../src/main.c: 357: firstFileName -=  val*1000;
      0002E7 89               [ 2]  695 	pushw	x
      0002E8 4B E8            [ 1]  696 	push	#0xe8
      0002EA 4B 03            [ 1]  697 	push	#0x03
      0002EC CDr00r00         [ 4]  698 	call	__mulint
      0002EF 5B 04            [ 2]  699 	addw	sp, #4
      0002F1 50               [ 2]  700 	negw	x
      0002F2 72 FB 03         [ 2]  701 	addw	x, (0x03, sp)
                                    702 ;	../src/main.c: 358: val = firstFileName/100;
      0002F5 1F 07            [ 2]  703 	ldw	(0x07, sp), x
      0002F7 1F 03            [ 2]  704 	ldw	(0x03, sp), x
      0002F9 90 AE 00 64      [ 2]  705 	ldw	y, #0x0064
      0002FD 65               [ 2]  706 	divw	x, y
                                    707 ;	../src/main.c: 359: fname[1] = val + 0x30;
      0002FE 16 01            [ 2]  708 	ldw	y, (0x01, sp)
      000300 90 5C            [ 1]  709 	incw	y
      000302 9F               [ 1]  710 	ld	a, xl
      000303 AB 30            [ 1]  711 	add	a, #0x30
      000305 90 F7            [ 1]  712 	ld	(y), a
                                    713 ;	../src/main.c: 360: firstFileName -=  val*100;
      000307 89               [ 2]  714 	pushw	x
      000308 4B 64            [ 1]  715 	push	#0x64
      00030A 4B 00            [ 1]  716 	push	#0x00
      00030C CDr00r00         [ 4]  717 	call	__mulint
      00030F 5B 04            [ 2]  718 	addw	sp, #4
      000311 50               [ 2]  719 	negw	x
      000312 72 FB 03         [ 2]  720 	addw	x, (0x03, sp)
                                    721 ;	../src/main.c: 361: val = firstFileName/10;
      000315 1F 07            [ 2]  722 	ldw	(0x07, sp), x
      000317 1F 03            [ 2]  723 	ldw	(0x03, sp), x
      000319 90 AE 00 0A      [ 2]  724 	ldw	y, #0x000a
      00031D 65               [ 2]  725 	divw	x, y
                                    726 ;	../src/main.c: 362: fname[2] = val + 0x30;
      00031E 16 01            [ 2]  727 	ldw	y, (0x01, sp)
      000320 72 A9 00 02      [ 2]  728 	addw	y, #0x0002
      000324 9F               [ 1]  729 	ld	a, xl
      000325 AB 30            [ 1]  730 	add	a, #0x30
      000327 90 F7            [ 1]  731 	ld	(y), a
                                    732 ;	../src/main.c: 363: firstFileName -=  val*10;
      000329 89               [ 2]  733 	pushw	x
      00032A 58               [ 2]  734 	sllw	x
      00032B 58               [ 2]  735 	sllw	x
      00032C 72 FB 01         [ 2]  736 	addw	x, (1, sp)
      00032F 58               [ 2]  737 	sllw	x
      000330 5B 02            [ 2]  738 	addw	sp, #2
      000332 50               [ 2]  739 	negw	x
      000333 72 FB 03         [ 2]  740 	addw	x, (0x03, sp)
      000336 1F 07            [ 2]  741 	ldw	(0x07, sp), x
                                    742 ;	../src/main.c: 364: fname[3] = firstFileName + 0x30;
      000338 1E 01            [ 2]  743 	ldw	x, (0x01, sp)
      00033A 1C 00 03         [ 2]  744 	addw	x, #0x0003
      00033D 7B 08            [ 1]  745 	ld	a, (0x08, sp)
      00033F AB 30            [ 1]  746 	add	a, #0x30
      000341 F7               [ 1]  747 	ld	(x), a
                                    748 ;	../src/main.c: 365: fname[4] = '\0';
      000342 1E 01            [ 2]  749 	ldw	x, (0x01, sp)
      000344 6F 04            [ 1]  750 	clr	(0x0004, x)
                                    751 ;	../src/main.c: 366: }
      000346 5B 04            [ 2]  752 	addw	sp, #4
      000348 81               [ 4]  753 	ret
                                    754 ;	../src/main.c: 381: static UINT GetCfg( uint8_t * pCfgBuf,  cfg_t * pcfg){
                                    755 ;	-----------------------------------------
                                    756 ;	 function GetCfg
                                    757 ;	-----------------------------------------
      000349                        758 _GetCfg:
      000349 52 12            [ 2]  759 	sub	sp, #18
                                    760 ;	../src/main.c: 384: if(!IsValidCfgBuf(pCfgBuf)) return 1; 
      00034B 1E 15            [ 2]  761 	ldw	x, (0x15, sp)
      00034D 89               [ 2]  762 	pushw	x
      00034E CDr04r4C         [ 4]  763 	call	_IsValidCfgBuf
      000351 85               [ 2]  764 	popw	x
      000352 6B 12            [ 1]  765 	ld	(0x12, sp), a
      000354 26 05            [ 1]  766 	jrne	00102$
      000356 5F               [ 1]  767 	clrw	x
      000357 5C               [ 1]  768 	incw	x
      000358 CCr04r49         [ 2]  769 	jp	00106$
      00035B                        770 00102$:
                                    771 ;	../src/main.c: 387: pcfg->sampFreq = pCfgBuf[0]+(((uint16_t)pCfgBuf[1])<<8);
      00035B 16 17            [ 2]  772 	ldw	y, (0x17, sp)
      00035D 17 01            [ 2]  773 	ldw	(0x01, sp), y
      00035F 16 15            [ 2]  774 	ldw	y, (0x15, sp)
      000361 17 03            [ 2]  775 	ldw	(0x03, sp), y
      000363 93               [ 1]  776 	ldw	x, y
      000364 F6               [ 1]  777 	ld	a, (x)
      000365 5F               [ 1]  778 	clrw	x
      000366 97               [ 1]  779 	ld	xl, a
      000367 16 03            [ 2]  780 	ldw	y, (0x03, sp)
      000369 90 E6 01         [ 1]  781 	ld	a, (0x1, y)
      00036C 90 95            [ 1]  782 	ld	yh, a
      00036E 4F               [ 1]  783 	clr	a
      00036F 1F 11            [ 2]  784 	ldw	(0x11, sp), x
      000371 90 97            [ 1]  785 	ld	yl, a
      000373 72 F9 11         [ 2]  786 	addw	y, (0x11, sp)
      000376 1E 01            [ 2]  787 	ldw	x, (0x01, sp)
      000378 FF               [ 2]  788 	ldw	(x), y
                                    789 ;	../src/main.c: 389: fID = pCfgBuf[2]+(((uint16_t)pCfgBuf[3])<<8);
      000379 1E 03            [ 2]  790 	ldw	x, (0x03, sp)
      00037B E6 02            [ 1]  791 	ld	a, (0x2, x)
      00037D 90 5F            [ 1]  792 	clrw	y
      00037F 90 97            [ 1]  793 	ld	yl, a
      000381 1E 03            [ 2]  794 	ldw	x, (0x03, sp)
      000383 E6 03            [ 1]  795 	ld	a, (0x3, x)
      000385 95               [ 1]  796 	ld	xh, a
      000386 4F               [ 1]  797 	clr	a
      000387 17 11            [ 2]  798 	ldw	(0x11, sp), y
      000389 97               [ 1]  799 	ld	xl, a
      00038A 72 FB 11         [ 2]  800 	addw	x, (0x11, sp)
                                    801 ;	../src/main.c: 391: ConvertFileName(fID, pcfg->firstFileName);
      00038D 16 01            [ 2]  802 	ldw	y, (0x01, sp)
      00038F 72 A9 00 02      [ 2]  803 	addw	y, #0x0002
      000393 90 89            [ 2]  804 	pushw	y
      000395 89               [ 2]  805 	pushw	x
      000396 CDr02rD0         [ 4]  806 	call	_ConvertFileName
      000399 5B 04            [ 2]  807 	addw	sp, #4
                                    808 ;	../src/main.c: 392: pcfg->fileNo = pCfgBuf[4]+(((uint16_t)pCfgBuf[5])<<8);
      00039B 16 01            [ 2]  809 	ldw	y, (0x01, sp)
      00039D 72 A9 00 0B      [ 2]  810 	addw	y, #0x000b
      0003A1 1E 03            [ 2]  811 	ldw	x, (0x03, sp)
      0003A3 E6 04            [ 1]  812 	ld	a, (0x4, x)
      0003A5 6B 10            [ 1]  813 	ld	(0x10, sp), a
      0003A7 0F 0F            [ 1]  814 	clr	(0x0f, sp)
      0003A9 1E 03            [ 2]  815 	ldw	x, (0x03, sp)
      0003AB E6 05            [ 1]  816 	ld	a, (0x5, x)
      0003AD 6B 11            [ 1]  817 	ld	(0x11, sp), a
      0003AF 0F 12            [ 1]  818 	clr	(0x12, sp)
      0003B1 1E 0F            [ 2]  819 	ldw	x, (0x0f, sp)
      0003B3 72 FB 11         [ 2]  820 	addw	x, (0x11, sp)
      0003B6 90 FF            [ 2]  821 	ldw	(y), x
                                    822 ;	../src/main.c: 393: pcfg->fileSzInBlock = pCfgBuf[6]+ \
      0003B8 1E 01            [ 2]  823 	ldw	x, (0x01, sp)
      0003BA 1C 00 07         [ 2]  824 	addw	x, #0x0007
      0003BD 1F 05            [ 2]  825 	ldw	(0x05, sp), x
      0003BF 1E 03            [ 2]  826 	ldw	x, (0x03, sp)
      0003C1 E6 06            [ 1]  827 	ld	a, (0x6, x)
      0003C3 90 97            [ 1]  828 	ld	yl, a
      0003C5 1E 03            [ 2]  829 	ldw	x, (0x03, sp)
      0003C7 E6 07            [ 1]  830 	ld	a, (0x7, x)
      0003C9 0F 11            [ 1]  831 	clr	(0x11, sp)
      0003CB 5F               [ 1]  832 	clrw	x
      0003CC 95               [ 1]  833 	ld	xh, a
      0003CD 7B 11            [ 1]  834 	ld	a, (0x11, sp)
      0003CF 0F 0A            [ 1]  835 	clr	(0x0a, sp)
      0003D1 0F 11            [ 1]  836 	clr	(0x11, sp)
      0003D3 0F 10            [ 1]  837 	clr	(0x10, sp)
      0003D5 0F 0F            [ 1]  838 	clr	(0x0f, sp)
      0003D7 88               [ 1]  839 	push	a
      0003D8 90 9F            [ 1]  840 	ld	a, yl
      0003DA 1B 0B            [ 1]  841 	add	a, (0x0b, sp)
      0003DC 90 97            [ 1]  842 	ld	yl, a
      0003DE 9E               [ 1]  843 	ld	a, xh
      0003DF 19 12            [ 1]  844 	adc	a, (0x12, sp)
      0003E1 90 95            [ 1]  845 	ld	yh, a
      0003E3 84               [ 1]  846 	pop	a
      0003E4 19 10            [ 1]  847 	adc	a, (0x10, sp)
      0003E6 6B 0C            [ 1]  848 	ld	(0x0c, sp), a
      0003E8 9F               [ 1]  849 	ld	a, xl
      0003E9 19 0F            [ 1]  850 	adc	a, (0x0f, sp)
      0003EB 6B 0B            [ 1]  851 	ld	(0x0b, sp), a
      0003ED 1E 03            [ 2]  852 	ldw	x, (0x03, sp)
      0003EF E6 08            [ 1]  853 	ld	a, (0x8, x)
      0003F1 5F               [ 1]  854 	clrw	x
      0003F2 0F 0F            [ 1]  855 	clr	(0x0f, sp)
      0003F4 0F 12            [ 1]  856 	clr	(0x12, sp)
      0003F6 0F 11            [ 1]  857 	clr	(0x11, sp)
      0003F8 72 F9 11         [ 2]  858 	addw	y, (0x11, sp)
      0003FB 19 0C            [ 1]  859 	adc	a, (0x0c, sp)
      0003FD 6B 08            [ 1]  860 	ld	(0x08, sp), a
      0003FF 9F               [ 1]  861 	ld	a, xl
      000400 19 0B            [ 1]  862 	adc	a, (0x0b, sp)
      000402 6B 07            [ 1]  863 	ld	(0x07, sp), a
      000404 1E 03            [ 2]  864 	ldw	x, (0x03, sp)
      000406 E6 09            [ 1]  865 	ld	a, (0x9, x)
      000408 0F 0F            [ 1]  866 	clr	(0x0f, sp)
      00040A 0F 0E            [ 1]  867 	clr	(0x0e, sp)
      00040C 5F               [ 1]  868 	clrw	x
      00040D 88               [ 1]  869 	push	a
      00040E 90 9F            [ 1]  870 	ld	a, yl
      000410 1B 0F            [ 1]  871 	add	a, (0x0f, sp)
      000412 90 02            [ 1]  872 	rlwa	y
      000414 89               [ 2]  873 	pushw	x
      000415 19 02            [ 1]  874 	adc	a, (2, sp)
      000417 85               [ 2]  875 	popw	x
      000418 90 95            [ 1]  876 	ld	yh, a
      00041A 9E               [ 1]  877 	ld	a, xh
      00041B 19 09            [ 1]  878 	adc	a, (0x09, sp)
      00041D 6B 11            [ 1]  879 	ld	(0x11, sp), a
      00041F 84               [ 1]  880 	pop	a
      000420 19 07            [ 1]  881 	adc	a, (0x07, sp)
      000422 6B 0F            [ 1]  882 	ld	(0x0f, sp), a
      000424 1E 05            [ 2]  883 	ldw	x, (0x05, sp)
      000426 EF 02            [ 2]  884 	ldw	(0x2, x), y
      000428 16 0F            [ 2]  885 	ldw	y, (0x0f, sp)
      00042A FF               [ 2]  886 	ldw	(x), y
                                    887 ;	../src/main.c: 397: pcfg->channel = pCfgBuf[10];
      00042B 1E 01            [ 2]  888 	ldw	x, (0x01, sp)
      00042D 1C 00 0D         [ 2]  889 	addw	x, #0x000d
      000430 16 03            [ 2]  890 	ldw	y, (0x03, sp)
      000432 90 E6 0A         [ 1]  891 	ld	a, (0xa, y)
      000435 F7               [ 1]  892 	ld	(x), a
                                    893 ;	../src/main.c: 398: if(pCfgBuf[11] == 0)
      000436 1E 03            [ 2]  894 	ldw	x, (0x03, sp)
      000438 E6 0B            [ 1]  895 	ld	a, (0xb, x)
                                    896 ;	../src/main.c: 400: pcfg->isFullResultion = false;
      00043A 1E 01            [ 2]  897 	ldw	x, (0x01, sp)
      00043C 1C 00 0E         [ 2]  898 	addw	x, #0x000e
                                    899 ;	../src/main.c: 398: if(pCfgBuf[11] == 0)
      00043F 4D               [ 1]  900 	tnz	a
      000440 26 03            [ 1]  901 	jrne	00104$
                                    902 ;	../src/main.c: 400: pcfg->isFullResultion = false;
      000442 7F               [ 1]  903 	clr	(x)
      000443 20 03            [ 2]  904 	jra	00105$
      000445                        905 00104$:
                                    906 ;	../src/main.c: 402: pcfg->isFullResultion = true;
      000445 A6 01            [ 1]  907 	ld	a, #0x01
      000447 F7               [ 1]  908 	ld	(x), a
      000448                        909 00105$:
                                    910 ;	../src/main.c: 405: return 0x0;
      000448 5F               [ 1]  911 	clrw	x
      000449                        912 00106$:
                                    913 ;	../src/main.c: 406: }
      000449 5B 12            [ 2]  914 	addw	sp, #18
      00044B 81               [ 4]  915 	ret
                                    916 ;	../src/main.c: 420: static uint8_t IsValidCfgBuf(uint8_t *pCfgBuf){
                                    917 ;	-----------------------------------------
                                    918 ;	 function IsValidCfgBuf
                                    919 ;	-----------------------------------------
      00044C                        920 _IsValidCfgBuf:
      00044C 88               [ 1]  921 	push	a
                                    922 ;	../src/main.c: 421: uint8_t crc = 0;
      00044D 0F 01            [ 1]  923 	clr	(0x01, sp)
                                    924 ;	../src/main.c: 429: return false;	
      00044F 5F               [ 1]  925 	clrw	x
      000450                        926 00105$:
                                    927 ;	../src/main.c: 423: for(; i < CFG_BUF_SZ - 1; i++){
      000450 A3 00 0C         [ 2]  928 	cpw	x, #0x000c
      000453 2E 0E            [ 1]  929 	jrsge	00101$
                                    930 ;	../src/main.c: 424: crc += pCfgBuf[i];		
      000455 90 93            [ 1]  931 	ldw	y, x
      000457 72 F9 04         [ 2]  932 	addw	y, (0x04, sp)
      00045A 90 F6            [ 1]  933 	ld	a, (y)
      00045C 1B 01            [ 1]  934 	add	a, (0x01, sp)
      00045E 6B 01            [ 1]  935 	ld	(0x01, sp), a
                                    936 ;	../src/main.c: 423: for(; i < CFG_BUF_SZ - 1; i++){
      000460 5C               [ 1]  937 	incw	x
      000461 20 ED            [ 2]  938 	jra	00105$
      000463                        939 00101$:
                                    940 ;	../src/main.c: 426: if(crc == pCfgBuf[CFG_BUF_SZ-1])
      000463 1E 04            [ 2]  941 	ldw	x, (0x04, sp)
      000465 E6 0C            [ 1]  942 	ld	a, (0xc, x)
                                    943 ;	../src/main.c: 427: return true;
      000467 10 01            [ 1]  944 	sub	a, (0x01, sp)
      000469 26 02            [ 1]  945 	jrne	00103$
      00046B 4C               [ 1]  946 	inc	a
                                    947 ;	../src/main.c: 429: return false;	
      00046C 21                     948 	.byte 0x21
      00046D                        949 00103$:
      00046D 4F               [ 1]  950 	clr	a
      00046E                        951 00107$:
                                    952 ;	../src/main.c: 430: }
      00046E 5B 01            [ 2]  953 	addw	sp, #1
      000470 81               [ 4]  954 	ret
                                    955 ;	../src/main.c: 439: static void clkInit( void )
                                    956 ;	-----------------------------------------
                                    957 ;	 function clkInit
                                    958 ;	-----------------------------------------
      000471                        959 _clkInit:
                                    960 ;	../src/main.c: 442: CLK->CKDIVR = 0;//(CLK_PRESCALER_HSIDIV1|CLK_PRESCALER_CPUDIV1);
      000471 35 00 50 C6      [ 1]  961 	mov	0x50c6+0, #0x00
                                    962 ;	../src/main.c: 443: CLK->ECKR |= CLK_ECKR_HSEEN;
      000475 72 10 50 C1      [ 1]  963 	bset	20673, #0
                                    964 ;	../src/main.c: 444: while(!(CLK->ECKR & CLK_ECKR_HSERDY));
      000479                        965 00101$:
      000479 C6 50 C1         [ 1]  966 	ld	a, 0x50c1
      00047C A5 02            [ 1]  967 	bcp	a, #0x02
      00047E 27 F9            [ 1]  968 	jreq	00101$
                                    969 ;	../src/main.c: 451: CLK->PCKENR1 |= (CLK_PCKENR1_TIM4|CLK_PCKENR1_SPI|CLK_PCKENR1_UART1);
      000480 C6 50 C7         [ 1]  970 	ld	a, 0x50c7
      000483 AA 16            [ 1]  971 	or	a, #0x16
      000485 C7 50 C7         [ 1]  972 	ld	0x50c7, a
                                    973 ;	../src/main.c: 452: CLK->PCKENR2 |= (CLK_PCKENR2_ADC);
      000488 72 16 50 CA      [ 1]  974 	bset	20682, #3
                                    975 ;	../src/main.c: 453: }
      00048C 81               [ 4]  976 	ret
                                    977 ;	../src/main.c: 468: void assert_failed(uint8_t* file, uint32_t line)
                                    978 ;	-----------------------------------------
                                    979 ;	 function assert_failed
                                    980 ;	-----------------------------------------
      00048D                        981 _assert_failed:
                                    982 ;	../src/main.c: 474: while (1)
      00048D                        983 00102$:
      00048D 20 FE            [ 2]  984 	jra	00102$
                                    985 ;	../src/main.c: 477: }
      00048F 81               [ 4]  986 	ret
                                    987 	.area CODE
                                    988 	.area CONST
                                    989 	.area CONST
      000000                        990 ___str_0:
      000000 43 46 47               991 	.ascii "CFG"
      000003 00                     992 	.db 0x00
                                    993 	.area CODE
                                    994 	.area INITIALIZER
      000000                        995 __xinit__blkCnt:
      000000 00                     996 	.db #0x00	; 0
      000001                        997 __xinit__fileBlkCnt:
      000001 00 00 00 00            998 	.byte #0x00, #0x00, #0x00, #0x00	; 0
      000005                        999 __xinit__fileNoCnt:
      000005 00 00                 1000 	.dw #0x0000
                                   1001 	.area CABS (ABS)
