--- ./STM8S_StdPeriph_Lib/Libraries/STM8S_StdPeriph_Driver/inc/stm8s.h	2018-04-27 10:56:24.000000000 +0200
+++ ./STM8S_StdPeriph_Lib_V2.3.1_sdcc/Libraries/STM8S_StdPeriph_Driver/inc/stm8s.h	2019-02-03 09:08:03.936466563 +0100
@@ -68,10 +68,10 @@
   - Low-Density STM8S devices are the STM8S103xx, STM8S003, STM8S903xx and STM8S001 microcontrollers
     where the Flash density is 8 Kbytes. */
 
-#if !defined (STM8S208) && !defined (STM8S207) && !defined (STM8S105) && \
-    !defined (STM8S103) && !defined (STM8S903) && !defined (STM8AF52Ax) && \
-    !defined (STM8AF62Ax) && !defined (STM8AF626x) && !defined (STM8S007) && \
-    !defined (STM8S003)&& !defined (STM8S005) && !defined(STM8S001) && !defined (STM8AF622x) 
+#if !defined(STM8S208) && !defined(STM8S207) && !defined(STM8S105) && \
+    !defined(STM8S103) && !defined(STM8S903) && !defined(STM8AF52Ax) && \
+    !defined(STM8AF62Ax) && !defined(STM8AF626x) && !defined(STM8S007) && \
+    !defined(STM8S003)&& !defined(STM8S005) && !defined(STM8S001) && !defined(STM8AF622x) 
  #error "Please select first the target STM8S/A device used in your application (in stm8s.h file)"
 #endif
 
@@ -85,6 +85,11 @@
  #define _RAISONANCE_
 #elif defined(__ICCSTM8__)
  #define _IAR_
+#elif defined(__SDCC)                    /* SDCC patch: add compiler key */
+ #define _SDCC_
+ #define SDCC_VERSION (__SDCC_VERSION_MAJOR * 10000 \
+                     + __SDCC_VERSION_MINOR * 100 \
+                     + __SDCC_VERSION_PATCH)
 #else
  #error "Unsupported Compiler!"          /* Compiler defines not found */
 #endif
@@ -104,8 +109,8 @@
         can define the HSE value in your toolchain compiler preprocessor.
   */
 #if !defined  HSE_Value
- #if defined (STM8S208) || defined (STM8S207) || defined (STM8S007) || defined (STM8AF52Ax) || \
-     defined (STM8AF62Ax) || defined (STM8AF622x)
+ #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
+     defined(STM8AF62Ax) || defined(STM8AF622x)
   #define HSE_VALUE ((uint32_t)24000000) /* Value of the External oscillator in Hz*/
  #else
   #define HSE_VALUE ((uint32_t)16000000) /* Value of the External oscillator in Hz*/
@@ -124,20 +129,26 @@
  #define TINY @tiny
  #define EEPROM @eeprom
  #define CONST  const
-#elif defined (_RAISONANCE_) /* __RCST7__ */
+#elif defined(_RAISONANCE_) /* __RCST7__ */
  #define FAR  far
  #define NEAR data
  #define TINY page0
  #define EEPROM eeprom
  #define CONST  code
- #if defined (STM8S208) || defined (STM8S207) || defined (STM8S007) || defined (STM8AF52Ax) || \
-     defined (STM8AF62Ax)
+ #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
+     defined(STM8AF62Ax)
    /*!< Used with memory Models for code higher than 64K */
   #define MEMCPY fmemcpy
  #else /* STM8S903, STM8S103, STM8S001, STM8S003, STM8S105, STM8AF626x, STM8AF622x */
   /*!< Used with memory Models for code less than 64K */
   #define MEMCPY memcpy
  #endif /* STM8S208 or STM8S207 or STM8S007 or STM8AF62Ax or STM8AF52Ax */ 
+#elif defined(_SDCC_)                    /* SDCC patch: mostly not required / not supported */
+ #define FAR
+ #define NEAR
+ #define TINY
+ #define EEPROM
+ #define CONST  const
 #else /*_IAR_*/
  #define FAR  __far
  #define NEAR __near
@@ -150,27 +161,31 @@
    to handle code smaller than 64KB) or far (3 bytes, to handle code larger 
    than 64K) */
 
-#if defined (STM8S105) || defined (STM8S005) || defined (STM8S103) || defined (STM8S003) || \
-    defined (STM8S001) || defined (STM8S903) || defined (STM8AF626x) || defined (STM8AF622x)
+#if defined(STM8S105) || defined(STM8S005) || defined(STM8S103) || defined(STM8S003) || \
+    defined(STM8S001) || defined(STM8S903) || defined(STM8AF626x) || defined(STM8AF622x)
 /*!< Used with memory Models for code smaller than 64K */
  #define PointerAttr NEAR
  #define MemoryAddressCast uint16_t
+ #undef _SDCC_BIGMEM_                    /* SDCC patch: simplify sdcc && >64kB indicator over different SPLs */
 #else /* STM8S208 or STM8S207 or STM8AF62Ax or STM8AF52Ax */
 /*!< Used with memory Models for code higher than 64K */
  #define PointerAttr FAR
  #define MemoryAddressCast uint32_t
+ #define _SDCC_BIGMEM_                   /* SDCC patch: simplify sdcc && >64kB indicator over different SPLs */
 #endif /* STM8S105 or STM8S103 or STM8S003 or STM8S001 or STM8S903 or STM8AF626x or STM8AF622x */
 
 /* Uncomment the line below to enable the FLASH functions execution from RAM */
-#if !defined (RAM_EXECUTION)
+#if !defined(RAM_EXECUTION)
 /* #define RAM_EXECUTION  (1) */
 #endif /* RAM_EXECUTION */
 
 #ifdef RAM_EXECUTION
  #ifdef _COSMIC_
    #define IN_RAM(a) a
- #elif defined (_RAISONANCE_) /* __RCST7__ */
+ #elif defined(_RAISONANCE_) /* __RCST7__ */
    #define IN_RAM(a) a inram
+ #elif defined(_SDCC_)                    /* SDCC patch: code in RAM not yet patched */
+  #error RAM execution not yet implemented in patch, comment RAM_EXECUTION in stm8s.h
  #else /*_IAR_*/
   #define IN_RAM(a) __ramfunc a
  #endif /* _COSMIC_ */
@@ -207,28 +222,50 @@
 #define     __O     volatile         /*!< defines 'write only' permissions    */
 #define     __IO    volatile         /*!< defines 'read / write' permissions  */
 
-/*!< Signed integer types  */
-typedef   signed char     int8_t;
-typedef   signed short    int16_t;
-typedef   signed long     int32_t;
+/* SDCC patch: define standard data types */
+#if defined(_COSMIC_) || defined(_RAISONANCE_) || defined(_IAR_)
+
+  // skip if already defined
+  #ifndef INT8_MAX
 
-/*!< Unsigned integer types  */
-typedef unsigned char     uint8_t;
-typedef unsigned short    uint16_t;
-typedef unsigned long     uint32_t;
+    /*!< Signed integer types  */
+    typedef   signed char     int8_t;
+    typedef   signed short    int16_t;
+    typedef   signed long     int32_t;
 
-/*!< STM8 Standard Peripheral Library old types (maintained for legacy purpose) */
+    /*!< Unsigned integer types  */
+    typedef unsigned char     uint8_t;
+    typedef unsigned short    uint16_t;
+    typedef unsigned long     uint32_t;
 
-typedef int32_t  s32;
-typedef int16_t s16;
-typedef int8_t  s8;
+    /*!< STM8 Standard Peripheral Library old types (maintained for legacy purpose) */
+    typedef int32_t  s32;
+    typedef int16_t s16;
+    typedef int8_t  s8;
 
-typedef uint32_t  u32;
-typedef uint16_t u16;
-typedef uint8_t  u8;
+    typedef uint32_t  u32;
+    typedef uint16_t u16;
+    typedef uint8_t  u8;
 
+  #endif // INT8_MAX
 
-typedef enum {FALSE = 0, TRUE = !FALSE} bool;
+#elif defined(_SDCC_)
+
+  // use compiler standard header
+  #include <stdint.h>
+
+#else
+ #error "Unsupported Compiler!"          /* Compiler defines not found */
+#endif
+
+
+/* SDCC patch: SDCC defines a special Bool type, use that if available */
+#ifdef __bool_true_false_are_defined
+ #define TRUE true
+ #define FALSE false
+#else
+ typedef enum {FALSE = 0, TRUE = !FALSE} bool;
+#endif
 
 typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus, BitStatus, BitAction;
 
@@ -377,7 +414,7 @@
  #define ADC1_CR3_DBUF    ((uint8_t)0x80) /*!< Data Buffer Enable mask */
  #define ADC1_CR3_OVR     ((uint8_t)0x40) /*!< Overrun Status Flag mask */
 
-#endif /* (STM8S105) ||(STM8S103) || (STM8S005) ||(STM8S003) || (STM8S001) || (STM8S903) || (STM8AF626x) || (STM8AF622x) */
+#endif /* (STM8S105) || (STM8S103) || (STM8S005) || (STM8S003) || (STM8S001) || (STM8S903) || (STM8AF626x) || (STM8AF622x) */
 /**
   * @}
   */
@@ -386,7 +423,7 @@
 /**
   * @brief  Analog to Digital Converter (ADC2)
   */
-#if defined(STM8S208) || defined(STM8S207) || defined (STM8S007) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
+#if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || defined(STM8AF62Ax)
  typedef struct ADC2_struct
  {
   __IO uint8_t CSR;        /*!< ADC2 control status register */
@@ -427,7 +464,7 @@
  #define ADC2_CR2_EXTSEL  ((uint8_t)0x30) /*!< External event selection mask */
  #define ADC2_CR2_ALIGN   ((uint8_t)0x08) /*!< Data Alignment mask */
 
-#endif /* (STM8S208) ||(STM8S207) || defined (STM8S007) || (STM8AF62Ax) || (STM8AF52Ax) */
+#endif /* (STM8S208) || (STM8S207) || defined(STM8S007) || (STM8AF62Ax) || (STM8AF52Ax) */
 /**
   * @}
   */
@@ -2601,18 +2638,18 @@
 #if defined(STM8S105) || defined(STM8S005) || defined(STM8S103) || defined(STM8S003) || \
     defined(STM8S001) || defined(STM8S903) || defined(STM8AF626x) || defined(STM8AF622x)
  #define ADC1 ((ADC1_TypeDef *) ADC1_BaseAddress)
-#endif /* (STM8S105)||(STM8S103)||(STM8S005)||(STM8S003)||(STM8S001)||(STM8S903)||(STM8AF626x)||(STM8AF622x)*/
+#endif /* (STM8S105) || (STM8S005) || (STM8S103) || (STM8S003) || (STM8S001) || (STM8S903) || (STM8AF626x) || (STM8AF622x) */
 
-#if defined(STM8S208) || defined(STM8S207) || defined (STM8S007) || defined (STM8AF52Ax) || \
-    defined (STM8AF62Ax)
-#define ADC2 ((ADC2_TypeDef *) ADC2_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207) || (STM8S007) || (STM8AF52Ax) || (STM8AF62Ax) */
+#if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
+    defined(STM8AF62Ax)
+ #define ADC2 ((ADC2_TypeDef *) ADC2_BaseAddress)
+#endif /* (STM8S208) || (STM8S207) || (STM8S007) || (STM8AF52Ax) || (STM8AF62Ax) */
 
 #define AWU ((AWU_TypeDef *) AWU_BaseAddress)
 
 #define BEEP ((BEEP_TypeDef *) BEEP_BaseAddress)
 
-#if defined (STM8S208) || defined (STM8AF52Ax)
+#if defined(STM8S208) || defined(STM8AF52Ax)
  #define CAN ((CAN_TypeDef *) CAN_BaseAddress)
 #endif /* (STM8S208) || (STM8AF52Ax) */
 
@@ -2636,16 +2673,16 @@
 
 #define GPIOF ((GPIO_TypeDef *) GPIOF_BaseAddress)
 
-#if defined(STM8S207) || defined (STM8S007) || defined(STM8S208) || defined(STM8S105) || \
-    defined(STM8S005) || defined (STM8AF52Ax) || defined (STM8AF62Ax) || defined (STM8AF626x)
+#if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined(STM8S105) || \
+    defined(STM8S005) || defined(STM8AF52Ax) || defined(STM8AF62Ax) || defined(STM8AF626x)
  #define GPIOG ((GPIO_TypeDef *) GPIOG_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207)  || (STM8S105) || (STM8AF52Ax) || (STM8AF62Ax) || (STM8AF626x) */
+#endif /* (STM8S207) || (STM8S007) || (STM8S208) || (STM8S105) || (STM8S005) || (STM8AF52Ax) || (STM8AF62Ax) || (STM8AF626x) */
 
-#if defined(STM8S207) || defined (STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || \
-    defined (STM8AF62Ax)
+#if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined(STM8AF52Ax) || \
+    defined(STM8AF62Ax)
  #define GPIOH ((GPIO_TypeDef *) GPIOH_BaseAddress)
  #define GPIOI ((GPIO_TypeDef *) GPIOI_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207) || (STM8AF62Ax) || (STM8AF52Ax) */
+#endif /* (STM8S207) || (STM8S007) || (STM8S208) || (STM8AF52Ax) || (STM8AF62Ax) */
 
 #define RST ((RST_TypeDef *) RST_BaseAddress)
 
@@ -2655,19 +2692,19 @@
 #define SPI ((SPI_TypeDef *) SPI_BaseAddress)
 #define I2C ((I2C_TypeDef *) I2C_BaseAddress)
 
-#if defined(STM8S208) || defined(STM8S207) || defined (STM8S007) || defined(STM8S103) || \
-    defined(STM8S003) || defined(STM8S001) || defined(STM8S903) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
+#if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
+    defined(STM8S003) || defined(STM8S001) || defined(STM8S903) || defined(STM8AF52Ax) || defined(STM8AF62Ax)
  #define UART1 ((UART1_TypeDef *) UART1_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207)  || (STM8S103) || (STM8S001) || (STM8S903) || (STM8AF52Ax) || (STM8AF62Ax) */
+#endif /* (STM8S208) || (STM8S207) || (STM8S007) || (STM8S103) || (STM8S003) || (STM8S001) || (STM8S903) || (STM8AF52Ax) || (STM8AF62Ax) */
 
-#if defined (STM8S105) || defined (STM8S005) || defined (STM8AF626x)
+#if defined(STM8S105) || defined(STM8S005) || defined(STM8AF626x)
  #define UART2 ((UART2_TypeDef *) UART2_BaseAddress)
-#endif /* STM8S105 || STM8S005 || STM8AF626x */
+#endif /* (STM8S105) || (STM8S005) || (STM8AF626x) */
 
-#if defined(STM8S208) ||defined(STM8S207) || defined (STM8S007) || defined (STM8AF52Ax) || \
-    defined (STM8AF62Ax)
+#if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
+    defined(STM8AF62Ax)
  #define UART3 ((UART3_TypeDef *) UART3_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207) || (STM8AF62Ax) || (STM8AF52Ax) */
+#endif /* (STM8S208) || (STM8S207) || (STM8S007) || (STM8AF52Ax) || (STM8AF62Ax) */
 
 #if defined(STM8AF622x)
  #define UART4 ((UART4_TypeDef *) UART4_BaseAddress)
@@ -2675,24 +2712,24 @@
 
 #define TIM1 ((TIM1_TypeDef *) TIM1_BaseAddress)
 
-#if defined(STM8S208) || defined(STM8S207) || defined (STM8S007) || defined(STM8S103) || \
-    defined(STM8S003) || defined(STM8S001) || defined(STM8S105) || defined(STM8S005) || defined (STM8AF52Ax) || \
-    defined (STM8AF62Ax) || defined (STM8AF626x)
+#if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
+    defined(STM8S003) || defined(STM8S001) || defined(STM8S105) || defined(STM8S005) || defined(STM8AF52Ax) || \
+    defined(STM8AF62Ax) || defined(STM8AF626x)
  #define TIM2 ((TIM2_TypeDef *) TIM2_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207)  || (STM8S103) || (STM8S001) || (STM8S105) || (STM8AF52Ax) || (STM8AF62Ax) || (STM8AF626x)*/
+#endif /* (STM8S208) || (STM8S207) || (STM8S007) || (STM8S103) || (STM8S003) || (STM8S001) || (STM8S105) || (STM8S005) || (STM8AF52Ax) || (STM8AF62Ax) || (STM8AF626x) */
 
-#if defined(STM8S208) || defined(STM8S207) || defined (STM8S007) || defined(STM8S105) || \
-    defined(STM8S005) || defined (STM8AF52Ax) || defined (STM8AF62Ax) || defined (STM8AF626x)
+#if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
+    defined(STM8S005) || defined(STM8AF52Ax) || defined(STM8AF62Ax) || defined(STM8AF626x)
  #define TIM3 ((TIM3_TypeDef *) TIM3_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207)  || (STM8S105) || (STM8AF62Ax) || (STM8AF52Ax) || (STM8AF626x)*/
+#endif /* (STM8S208) || (STM8S207) || (STM8S007) || (STM8S105) || (STM8S005) || (STM8AF52Ax) || (STM8AF62Ax) || (STM8AF626x) */
 
-#if defined(STM8S208) ||defined(STM8S207) || defined (STM8S007) || defined(STM8S103) || \
-    defined(STM8S003) || defined(STM8S001) || defined(STM8S105) || defined(STM8S005) || defined (STM8AF52Ax) || \
-    defined (STM8AF62Ax) || defined (STM8AF626x)
+#if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
+    defined(STM8S003) || defined(STM8S001) || defined(STM8S105) || defined(STM8S005) || defined(STM8AF52Ax) || \
+    defined(STM8AF62Ax) || defined(STM8AF626x)
  #define TIM4 ((TIM4_TypeDef *) TIM4_BaseAddress)
-#endif /* (STM8S208) ||(STM8S207)  || (STM8S103) || (STM8S001) || (STM8S105) || (STM8AF52Ax) || (STM8AF62Ax) || (STM8AF626x)*/
+#endif /* (STM8S208) || (STM8S207) || (STM8S007) || (STM8S103) || (STM8S003) || (STM8S001) || (STM8S105) || (STM8S005) || (STM8AF52Ax) || (STM8AF62Ax) || (STM8AF626x) */
 
-#if defined (STM8S903) || defined (STM8AF622x)
+#if defined(STM8S903) || defined(STM8AF622x)
  #define TIM5 ((TIM5_TypeDef *) TIM5_BaseAddress)
  #define TIM6 ((TIM6_TypeDef *) TIM6_BaseAddress)
 #endif /* (STM8S903) || (STM8AF622x) */ 
@@ -2730,6 +2767,16 @@
  #define trap()                {_asm("trap\n");} /* Trap (soft IT) */
  #define wfi()                 {_asm("wfi\n");}  /* Wait For Interrupt */
  #define halt()                {_asm("halt\n");} /* Halt */
+#elif defined(_SDCC_)                    /* SDCC patch: standard inline asm macros */
+ #define enableInterrupts()    __asm__("rim")    /* enable interrupts */
+ #define disableInterrupts()   __asm__("sim")    /* disable interrupts */
+ #define rim()                 __asm__("rim")    /* enable interrupts */
+ #define sim()                 __asm__("sim")    /* disable interrupts */
+ #define nop()                 __asm__("nop")    /* no operation */
+ #define trap()                __asm__("trap")   /* trap (soft IT) */
+ #define wfi()                 __asm__("wfi")    /* wait for interrupt */
+ #define wfe()                 __asm__("wfe")    /* wait for event */
+ #define halt()                __asm__("halt")   /* halt CPU */
 #else /*_IAR_*/
  #include <intrinsics.h>
  #define enableInterrupts()    __enable_interrupt()   /* enable interrupts */
@@ -2764,12 +2811,29 @@
  _Pragma( VECTOR_ID( 1 ) ) \
  __interrupt void (a) (void)  
 #endif /* _IAR_ */
+ 
+/* SDCC patch: declare ISR handlers */
+#ifdef _SDCC_
+ #define INTERRUPT_HANDLER(a,b) void a() __interrupt(b)
+
+ /* traps require >=v3.4.3 -> else warn and skip */
+ #if SDCC_VERSION >= 30403
+   #define INTERRUPT_HANDLER_TRAP(a) void a() __trap 
+ #else
+   #warning traps require SDCC>=v3.4.3. Update if required
+   #define INTERRUPT_HANDLER_TRAP(a) void a()
+ #endif 
+
+#endif /* _SDCC_ */
 
 /*============================== Interrupt Handler declaration ========================*/
 #ifdef _COSMIC_
  #define INTERRUPT @far @interrupt
 #elif defined(_IAR_)
  #define INTERRUPT __interrupt
+#elif defined(_SDCC_)                    /* SDCC patch: doesn't work like that in SDCC -> skip */
+  #define INTERRUPT __interrupt
+  #include "stm8s_it.h"                  /* SDCC patch: ensure inclusion in main.c for interrupts */
 #endif /* _COSMIC_ */
 
 /*============================== Handling bits ====================================*/
